// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SMPTE-429-9-2007-AM.h"

namespace am
{
  // UUID
  // 


  // UserText
  // 

  const UserText::LanguageType& UserText::
  getLanguage () const
  {
    return this->language_.get ();
  }

  UserText::LanguageType& UserText::
  getLanguage ()
  {
    return this->language_.get ();
  }

  void UserText::
  setLanguage (const LanguageType& x)
  {
    this->language_.set (x);
  }

  void UserText::
  setLanguage (::std::unique_ptr< LanguageType > x)
  {
    this->language_.set (std::move (x));
  }

  const UserText::LanguageType& UserText::
  getLanguageDefaultValue ()
  {
    return language_default_value_;
  }


  // ChunkType
  // 

  const ChunkType::PathType& ChunkType::
  getPath () const
  {
    return this->Path_.get ();
  }

  ChunkType::PathType& ChunkType::
  getPath ()
  {
    return this->Path_.get ();
  }

  void ChunkType::
  setPath (const PathType& x)
  {
    this->Path_.set (x);
  }

  void ChunkType::
  setPath (::std::unique_ptr< PathType > x)
  {
    this->Path_.set (std::move (x));
  }

  const ChunkType::VolumeIndexOptional& ChunkType::
  getVolumeIndex () const
  {
    return this->VolumeIndex_;
  }

  ChunkType::VolumeIndexOptional& ChunkType::
  getVolumeIndex ()
  {
    return this->VolumeIndex_;
  }

  void ChunkType::
  setVolumeIndex (const VolumeIndexType& x)
  {
    this->VolumeIndex_.set (x);
  }

  void ChunkType::
  setVolumeIndex (const VolumeIndexOptional& x)
  {
    this->VolumeIndex_ = x;
  }

  const ChunkType::OffsetOptional& ChunkType::
  getOffset () const
  {
    return this->Offset_;
  }

  ChunkType::OffsetOptional& ChunkType::
  getOffset ()
  {
    return this->Offset_;
  }

  void ChunkType::
  setOffset (const OffsetType& x)
  {
    this->Offset_.set (x);
  }

  void ChunkType::
  setOffset (const OffsetOptional& x)
  {
    this->Offset_ = x;
  }

  const ChunkType::LengthOptional& ChunkType::
  getLength () const
  {
    return this->Length_;
  }

  ChunkType::LengthOptional& ChunkType::
  getLength ()
  {
    return this->Length_;
  }

  void ChunkType::
  setLength (const LengthType& x)
  {
    this->Length_.set (x);
  }

  void ChunkType::
  setLength (const LengthOptional& x)
  {
    this->Length_ = x;
  }


  // AssetType
  // 

  const AssetType::IdType& AssetType::
  getId () const
  {
    return this->Id_.get ();
  }

  AssetType::IdType& AssetType::
  getId ()
  {
    return this->Id_.get ();
  }

  void AssetType::
  setId (const IdType& x)
  {
    this->Id_.set (x);
  }

  void AssetType::
  setId (::std::unique_ptr< IdType > x)
  {
    this->Id_.set (std::move (x));
  }

  const AssetType::AnnotationTextOptional& AssetType::
  getAnnotationText () const
  {
    return this->AnnotationText_;
  }

  AssetType::AnnotationTextOptional& AssetType::
  getAnnotationText ()
  {
    return this->AnnotationText_;
  }

  void AssetType::
  setAnnotationText (const AnnotationTextType& x)
  {
    this->AnnotationText_.set (x);
  }

  void AssetType::
  setAnnotationText (const AnnotationTextOptional& x)
  {
    this->AnnotationText_ = x;
  }

  void AssetType::
  setAnnotationText (::std::unique_ptr< AnnotationTextType > x)
  {
    this->AnnotationText_.set (std::move (x));
  }

  const AssetType::PackingListOptional& AssetType::
  getPackingList () const
  {
    return this->PackingList_;
  }

  AssetType::PackingListOptional& AssetType::
  getPackingList ()
  {
    return this->PackingList_;
  }

  void AssetType::
  setPackingList (const PackingListType& x)
  {
    this->PackingList_.set (x);
  }

  void AssetType::
  setPackingList (const PackingListOptional& x)
  {
    this->PackingList_ = x;
  }

  const AssetType::ChunkListType& AssetType::
  getChunkList () const
  {
    return this->ChunkList_.get ();
  }

  AssetType::ChunkListType& AssetType::
  getChunkList ()
  {
    return this->ChunkList_.get ();
  }

  void AssetType::
  setChunkList (const ChunkListType& x)
  {
    this->ChunkList_.set (x);
  }

  void AssetType::
  setChunkList (::std::unique_ptr< ChunkListType > x)
  {
    this->ChunkList_.set (std::move (x));
  }


  // AssetMapType
  // 

  const AssetMapType::IdType& AssetMapType::
  getId () const
  {
    return this->Id_.get ();
  }

  AssetMapType::IdType& AssetMapType::
  getId ()
  {
    return this->Id_.get ();
  }

  void AssetMapType::
  setId (const IdType& x)
  {
    this->Id_.set (x);
  }

  void AssetMapType::
  setId (::std::unique_ptr< IdType > x)
  {
    this->Id_.set (std::move (x));
  }

  const AssetMapType::AnnotationTextOptional& AssetMapType::
  getAnnotationText () const
  {
    return this->AnnotationText_;
  }

  AssetMapType::AnnotationTextOptional& AssetMapType::
  getAnnotationText ()
  {
    return this->AnnotationText_;
  }

  void AssetMapType::
  setAnnotationText (const AnnotationTextType& x)
  {
    this->AnnotationText_.set (x);
  }

  void AssetMapType::
  setAnnotationText (const AnnotationTextOptional& x)
  {
    this->AnnotationText_ = x;
  }

  void AssetMapType::
  setAnnotationText (::std::unique_ptr< AnnotationTextType > x)
  {
    this->AnnotationText_.set (std::move (x));
  }

  const AssetMapType::CreatorType& AssetMapType::
  getCreator () const
  {
    return this->Creator_.get ();
  }

  AssetMapType::CreatorType& AssetMapType::
  getCreator ()
  {
    return this->Creator_.get ();
  }

  void AssetMapType::
  setCreator (const CreatorType& x)
  {
    this->Creator_.set (x);
  }

  void AssetMapType::
  setCreator (::std::unique_ptr< CreatorType > x)
  {
    this->Creator_.set (std::move (x));
  }

  const AssetMapType::VolumeCountType& AssetMapType::
  getVolumeCount () const
  {
    return this->VolumeCount_.get ();
  }

  AssetMapType::VolumeCountType& AssetMapType::
  getVolumeCount ()
  {
    return this->VolumeCount_.get ();
  }

  void AssetMapType::
  setVolumeCount (const VolumeCountType& x)
  {
    this->VolumeCount_.set (x);
  }

  const AssetMapType::IssueDateType& AssetMapType::
  getIssueDate () const
  {
    return this->IssueDate_.get ();
  }

  AssetMapType::IssueDateType& AssetMapType::
  getIssueDate ()
  {
    return this->IssueDate_.get ();
  }

  void AssetMapType::
  setIssueDate (const IssueDateType& x)
  {
    this->IssueDate_.set (x);
  }

  void AssetMapType::
  setIssueDate (::std::unique_ptr< IssueDateType > x)
  {
    this->IssueDate_.set (std::move (x));
  }

  const AssetMapType::IssuerType& AssetMapType::
  getIssuer () const
  {
    return this->Issuer_.get ();
  }

  AssetMapType::IssuerType& AssetMapType::
  getIssuer ()
  {
    return this->Issuer_.get ();
  }

  void AssetMapType::
  setIssuer (const IssuerType& x)
  {
    this->Issuer_.set (x);
  }

  void AssetMapType::
  setIssuer (::std::unique_ptr< IssuerType > x)
  {
    this->Issuer_.set (std::move (x));
  }

  const AssetMapType::AssetListType& AssetMapType::
  getAssetList () const
  {
    return this->AssetList_.get ();
  }

  AssetMapType::AssetListType& AssetMapType::
  getAssetList ()
  {
    return this->AssetList_.get ();
  }

  void AssetMapType::
  setAssetList (const AssetListType& x)
  {
    this->AssetList_.set (x);
  }

  void AssetMapType::
  setAssetList (::std::unique_ptr< AssetListType > x)
  {
    this->AssetList_.set (std::move (x));
  }


  // VolumeIndexType
  // 

  const VolumeIndexType::IndexType& VolumeIndexType::
  getIndex () const
  {
    return this->Index_.get ();
  }

  VolumeIndexType::IndexType& VolumeIndexType::
  getIndex ()
  {
    return this->Index_.get ();
  }

  void VolumeIndexType::
  setIndex (const IndexType& x)
  {
    this->Index_.set (x);
  }


  // AssetType_ChunkListType
  // 

  const AssetType_ChunkListType::ChunkSequence& AssetType_ChunkListType::
  getChunk () const
  {
    return this->Chunk_;
  }

  AssetType_ChunkListType::ChunkSequence& AssetType_ChunkListType::
  getChunk ()
  {
    return this->Chunk_;
  }

  void AssetType_ChunkListType::
  setChunk (const ChunkSequence& s)
  {
    this->Chunk_ = s;
  }


  // AssetMapType_AssetListType
  // 

  const AssetMapType_AssetListType::AssetSequence& AssetMapType_AssetListType::
  getAsset () const
  {
    return this->Asset_;
  }

  AssetMapType_AssetListType::AssetSequence& AssetMapType_AssetListType::
  getAsset ()
  {
    return this->Asset_;
  }

  void AssetMapType_AssetListType::
  setAsset (const AssetSequence& s)
  {
    this->Asset_ = s;
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace am
{
  // UUID
  //

  UUID::
  UUID (const ::xml_schema::Uri& _xsd_Uri_base)
  : ::xml_schema::Uri (_xsd_Uri_base)
  {
  }

  UUID::
  UUID (const UUID& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Uri (x, f, c)
  {
  }

  UUID::
  UUID (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Uri (e, f, c)
  {
  }

  UUID::
  UUID (const ::xercesc::DOMAttr& a,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Uri (a, f, c)
  {
  }

  UUID::
  UUID (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Uri (s, e, f, c)
  {
  }

  UUID* UUID::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class UUID (*this, f, c);
  }

  UUID::
  ~UUID ()
  {
  }

  // UserText
  //

  const UserText::LanguageType UserText::language_default_value_ (
    "en");

  UserText::
  UserText ()
  : ::xml_schema::String (),
    language_ (getLanguageDefaultValue (), this)
  {
  }

  UserText::
  UserText (const char* _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    language_ (getLanguageDefaultValue (), this)
  {
  }

  UserText::
  UserText (const ::std::string& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    language_ (getLanguageDefaultValue (), this)
  {
  }

  UserText::
  UserText (const ::xml_schema::String& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    language_ (getLanguageDefaultValue (), this)
  {
  }

  UserText::
  UserText (const UserText& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::String (x, f, c),
    language_ (x.language_, f, this)
  {
  }

  UserText::
  UserText (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::String (e, f | ::xml_schema::Flags::base, c),
    language_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void UserText::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "language" && n.namespace_ ().empty ())
      {
        this->language_.set (LanguageTraits::create (i, f, this));
        continue;
      }
    }

    if (!language_.present ())
    {
      this->language_.set (getLanguageDefaultValue ());
    }
  }

  UserText* UserText::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class UserText (*this, f, c);
  }

  UserText& UserText::
  operator= (const UserText& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::String& > (*this) = x;
      this->language_ = x.language_;
    }

    return *this;
  }

  UserText::
  ~UserText ()
  {
  }

  // ChunkType
  //

  ChunkType::
  ChunkType (const PathType& Path)
  : ::xml_schema::Type (),
    Path_ (Path, this),
    VolumeIndex_ (this),
    Offset_ (this),
    Length_ (this)
  {
  }

  ChunkType::
  ChunkType (const ChunkType& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Path_ (x.Path_, f, this),
    VolumeIndex_ (x.VolumeIndex_, f, this),
    Offset_ (x.Offset_, f, this),
    Length_ (x.Length_, f, this)
  {
  }

  ChunkType::
  ChunkType (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Path_ (this),
    VolumeIndex_ (this),
    Offset_ (this),
    Length_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void ChunkType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Path
      //
      if (n.name () == "Path" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< PathType > r (
          PathTraits::create (i, f, this));

        if (!Path_.present ())
        {
          this->Path_.set (::std::move (r));
          continue;
        }
      }

      // VolumeIndex
      //
      if (n.name () == "VolumeIndex" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        if (!this->VolumeIndex_)
        {
          this->VolumeIndex_.set (VolumeIndexTraits::create (i, f, this));
          continue;
        }
      }

      // Offset
      //
      if (n.name () == "Offset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        if (!this->Offset_)
        {
          this->Offset_.set (OffsetTraits::create (i, f, this));
          continue;
        }
      }

      // Length
      //
      if (n.name () == "Length" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        if (!this->Length_)
        {
          this->Length_.set (LengthTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!Path_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Path",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }
  }

  ChunkType* ChunkType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ChunkType (*this, f, c);
  }

  ChunkType& ChunkType::
  operator= (const ChunkType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Path_ = x.Path_;
      this->VolumeIndex_ = x.VolumeIndex_;
      this->Offset_ = x.Offset_;
      this->Length_ = x.Length_;
    }

    return *this;
  }

  ChunkType::
  ~ChunkType ()
  {
  }

  // AssetType
  //

  AssetType::
  AssetType (const IdType& Id,
             const ChunkListType& ChunkList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AnnotationText_ (this),
    PackingList_ (this),
    ChunkList_ (ChunkList, this)
  {
  }

  AssetType::
  AssetType (const IdType& Id,
             ::std::unique_ptr< ChunkListType > ChunkList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AnnotationText_ (this),
    PackingList_ (this),
    ChunkList_ (std::move (ChunkList), this)
  {
  }

  AssetType::
  AssetType (const AssetType& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Id_ (x.Id_, f, this),
    AnnotationText_ (x.AnnotationText_, f, this),
    PackingList_ (x.PackingList_, f, this),
    ChunkList_ (x.ChunkList_, f, this)
  {
  }

  AssetType::
  AssetType (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Id_ (this),
    AnnotationText_ (this),
    PackingList_ (this),
    ChunkList_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AssetType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Id
      //
      if (n.name () == "Id" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< IdType > r (
          IdTraits::create (i, f, this));

        if (!Id_.present ())
        {
          this->Id_.set (::std::move (r));
          continue;
        }
      }

      // AnnotationText
      //
      if (n.name () == "AnnotationText" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< AnnotationTextType > r (
          AnnotationTextTraits::create (i, f, this));

        if (!this->AnnotationText_)
        {
          this->AnnotationText_.set (::std::move (r));
          continue;
        }
      }

      // PackingList
      //
      if (n.name () == "PackingList" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        if (!this->PackingList_)
        {
          this->PackingList_.set (PackingListTraits::create (i, f, this));
          continue;
        }
      }

      // ChunkList
      //
      if (n.name () == "ChunkList" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< ChunkListType > r (
          ChunkListTraits::create (i, f, this));

        if (!ChunkList_.present ())
        {
          this->ChunkList_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Id",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }

    if (!ChunkList_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ChunkList",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }
  }

  AssetType* AssetType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AssetType (*this, f, c);
  }

  AssetType& AssetType::
  operator= (const AssetType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Id_ = x.Id_;
      this->AnnotationText_ = x.AnnotationText_;
      this->PackingList_ = x.PackingList_;
      this->ChunkList_ = x.ChunkList_;
    }

    return *this;
  }

  AssetType::
  ~AssetType ()
  {
  }

  // AssetMapType
  //

  AssetMapType::
  AssetMapType (const IdType& Id,
                const CreatorType& Creator,
                const VolumeCountType& VolumeCount,
                const IssueDateType& IssueDate,
                const IssuerType& Issuer,
                const AssetListType& AssetList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AnnotationText_ (this),
    Creator_ (Creator, this),
    VolumeCount_ (VolumeCount, this),
    IssueDate_ (IssueDate, this),
    Issuer_ (Issuer, this),
    AssetList_ (AssetList, this)
  {
  }

  AssetMapType::
  AssetMapType (const IdType& Id,
                ::std::unique_ptr< CreatorType > Creator,
                const VolumeCountType& VolumeCount,
                const IssueDateType& IssueDate,
                ::std::unique_ptr< IssuerType > Issuer,
                ::std::unique_ptr< AssetListType > AssetList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AnnotationText_ (this),
    Creator_ (std::move (Creator), this),
    VolumeCount_ (VolumeCount, this),
    IssueDate_ (IssueDate, this),
    Issuer_ (std::move (Issuer), this),
    AssetList_ (std::move (AssetList), this)
  {
  }

  AssetMapType::
  AssetMapType (const AssetMapType& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Id_ (x.Id_, f, this),
    AnnotationText_ (x.AnnotationText_, f, this),
    Creator_ (x.Creator_, f, this),
    VolumeCount_ (x.VolumeCount_, f, this),
    IssueDate_ (x.IssueDate_, f, this),
    Issuer_ (x.Issuer_, f, this),
    AssetList_ (x.AssetList_, f, this)
  {
  }

  AssetMapType::
  AssetMapType (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Id_ (this),
    AnnotationText_ (this),
    Creator_ (this),
    VolumeCount_ (this),
    IssueDate_ (this),
    Issuer_ (this),
    AssetList_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AssetMapType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Id
      //
      if (n.name () == "Id" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< IdType > r (
          IdTraits::create (i, f, this));

        if (!Id_.present ())
        {
          this->Id_.set (::std::move (r));
          continue;
        }
      }

      // AnnotationText
      //
      if (n.name () == "AnnotationText" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< AnnotationTextType > r (
          AnnotationTextTraits::create (i, f, this));

        if (!this->AnnotationText_)
        {
          this->AnnotationText_.set (::std::move (r));
          continue;
        }
      }

      // Creator
      //
      if (n.name () == "Creator" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< CreatorType > r (
          CreatorTraits::create (i, f, this));

        if (!Creator_.present ())
        {
          this->Creator_.set (::std::move (r));
          continue;
        }
      }

      // VolumeCount
      //
      if (n.name () == "VolumeCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        if (!VolumeCount_.present ())
        {
          this->VolumeCount_.set (VolumeCountTraits::create (i, f, this));
          continue;
        }
      }

      // IssueDate
      //
      if (n.name () == "IssueDate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< IssueDateType > r (
          IssueDateTraits::create (i, f, this));

        if (!IssueDate_.present ())
        {
          this->IssueDate_.set (::std::move (r));
          continue;
        }
      }

      // Issuer
      //
      if (n.name () == "Issuer" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< IssuerType > r (
          IssuerTraits::create (i, f, this));

        if (!Issuer_.present ())
        {
          this->Issuer_.set (::std::move (r));
          continue;
        }
      }

      // AssetList
      //
      if (n.name () == "AssetList" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< AssetListType > r (
          AssetListTraits::create (i, f, this));

        if (!AssetList_.present ())
        {
          this->AssetList_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Id",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }

    if (!Creator_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Creator",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }

    if (!VolumeCount_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "VolumeCount",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }

    if (!IssueDate_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IssueDate",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }

    if (!Issuer_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Issuer",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }

    if (!AssetList_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "AssetList",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }
  }

  AssetMapType* AssetMapType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AssetMapType (*this, f, c);
  }

  AssetMapType& AssetMapType::
  operator= (const AssetMapType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Id_ = x.Id_;
      this->AnnotationText_ = x.AnnotationText_;
      this->Creator_ = x.Creator_;
      this->VolumeCount_ = x.VolumeCount_;
      this->IssueDate_ = x.IssueDate_;
      this->Issuer_ = x.Issuer_;
      this->AssetList_ = x.AssetList_;
    }

    return *this;
  }

  AssetMapType::
  ~AssetMapType ()
  {
  }

  // VolumeIndexType
  //

  VolumeIndexType::
  VolumeIndexType (const IndexType& Index)
  : ::xml_schema::Type (),
    Index_ (Index, this)
  {
  }

  VolumeIndexType::
  VolumeIndexType (const VolumeIndexType& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Index_ (x.Index_, f, this)
  {
  }

  VolumeIndexType::
  VolumeIndexType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Index_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void VolumeIndexType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Index
      //
      if (n.name () == "Index" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        if (!Index_.present ())
        {
          this->Index_.set (IndexTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!Index_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Index",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }
  }

  VolumeIndexType* VolumeIndexType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class VolumeIndexType (*this, f, c);
  }

  VolumeIndexType& VolumeIndexType::
  operator= (const VolumeIndexType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Index_ = x.Index_;
    }

    return *this;
  }

  VolumeIndexType::
  ~VolumeIndexType ()
  {
  }

  // AssetType_ChunkListType
  //

  AssetType_ChunkListType::
  AssetType_ChunkListType ()
  : ::xml_schema::Type (),
    Chunk_ (this)
  {
  }

  AssetType_ChunkListType::
  AssetType_ChunkListType (const AssetType_ChunkListType& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Chunk_ (x.Chunk_, f, this)
  {
  }

  AssetType_ChunkListType::
  AssetType_ChunkListType (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Chunk_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AssetType_ChunkListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Chunk
      //
      if (n.name () == "Chunk" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< ChunkType > r (
          ChunkTraits::create (i, f, this));

        this->Chunk_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  AssetType_ChunkListType* AssetType_ChunkListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AssetType_ChunkListType (*this, f, c);
  }

  AssetType_ChunkListType& AssetType_ChunkListType::
  operator= (const AssetType_ChunkListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Chunk_ = x.Chunk_;
    }

    return *this;
  }

  AssetType_ChunkListType::
  ~AssetType_ChunkListType ()
  {
  }

  // AssetMapType_AssetListType
  //

  AssetMapType_AssetListType::
  AssetMapType_AssetListType ()
  : ::xml_schema::Type (),
    Asset_ (this)
  {
  }

  AssetMapType_AssetListType::
  AssetMapType_AssetListType (const AssetMapType_AssetListType& x,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Asset_ (x.Asset_, f, this)
  {
  }

  AssetMapType_AssetListType::
  AssetMapType_AssetListType (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Asset_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AssetMapType_AssetListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Asset
      //
      if (n.name () == "Asset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
      {
        ::std::unique_ptr< AssetType > r (
          AssetTraits::create (i, f, this));

        this->Asset_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  AssetMapType_AssetListType* AssetMapType_AssetListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AssetMapType_AssetListType (*this, f, c);
  }

  AssetMapType_AssetListType& AssetMapType_AssetListType::
  operator= (const AssetMapType_AssetListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Asset_ = x.Asset_;
    }

    return *this;
  }

  AssetMapType_AssetListType::
  ~AssetMapType_AssetListType ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace am
{
  ::std::ostream&
  operator<< (::std::ostream& o, const UUID& i)
  {
    o << static_cast< const ::xml_schema::Uri& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UserText& i)
  {
    o << static_cast< const ::xml_schema::String& > (i);

    o << ::std::endl << "language: " << i.getLanguage ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ChunkType& i)
  {
    o << ::std::endl << "Path: " << i.getPath ();
    if (i.getVolumeIndex ())
    {
      o << ::std::endl << "VolumeIndex: " << *i.getVolumeIndex ();
    }

    if (i.getOffset ())
    {
      o << ::std::endl << "Offset: " << *i.getOffset ();
    }

    if (i.getLength ())
    {
      o << ::std::endl << "Length: " << *i.getLength ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AssetType& i)
  {
    o << ::std::endl << "Id: " << i.getId ();
    if (i.getAnnotationText ())
    {
      o << ::std::endl << "AnnotationText: " << *i.getAnnotationText ();
    }

    if (i.getPackingList ())
    {
      o << ::std::endl << "PackingList: " << *i.getPackingList ();
    }

    o << ::std::endl << "ChunkList: " << i.getChunkList ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AssetMapType& i)
  {
    o << ::std::endl << "Id: " << i.getId ();
    if (i.getAnnotationText ())
    {
      o << ::std::endl << "AnnotationText: " << *i.getAnnotationText ();
    }

    o << ::std::endl << "Creator: " << i.getCreator ();
    o << ::std::endl << "VolumeCount: " << i.getVolumeCount ();
    o << ::std::endl << "IssueDate: " << i.getIssueDate ();
    o << ::std::endl << "Issuer: " << i.getIssuer ();
    o << ::std::endl << "AssetList: " << i.getAssetList ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const VolumeIndexType& i)
  {
    o << ::std::endl << "Index: " << i.getIndex ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AssetType_ChunkListType& i)
  {
    for (AssetType_ChunkListType::ChunkConstIterator
         b (i.getChunk ().begin ()), e (i.getChunk ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Chunk: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AssetMapType_AssetListType& i)
  {
    for (AssetMapType_AssetListType::AssetConstIterator
         b (i.getAsset ().begin ()), e (i.getAsset ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Asset: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace am
{
  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (const ::std::string& u,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::am::AssetMapType > (
      ::am::parseAssetMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (const ::std::string& u,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::am::AssetMapType > (
      ::am::parseAssetMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::am::AssetMapType > (
      ::am::parseAssetMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::std::istream& is,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::am::parseAssetMap (isrc, f, p);
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::std::istream& is,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::am::parseAssetMap (isrc, h, f, p);
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::am::parseAssetMap (isrc, h, f, p);
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::am::parseAssetMap (isrc, f, p);
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::am::parseAssetMap (isrc, h, f, p);
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::am::parseAssetMap (isrc, h, f, p);
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::xercesc::InputSource& i,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::am::AssetMapType > (
      ::am::parseAssetMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::xercesc::InputSource& i,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::am::AssetMapType > (
      ::am::parseAssetMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::am::AssetMapType > (
      ::am::parseAssetMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::am::AssetMapType > (
        ::am::parseAssetMap (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "AssetMap" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
    {
      ::std::unique_ptr< ::am::AssetMapType > r (
        ::xsd::cxx::tree::traits< ::am::AssetMapType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "AssetMap",
      "http://www.smpte-ra.org/schemas/429-9/2007/AM");
  }

  ::std::unique_ptr< ::am::AssetMapType >
  parseAssetMap (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "AssetMap" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
    {
      ::std::unique_ptr< ::am::AssetMapType > r (
        ::xsd::cxx::tree::traits< ::am::AssetMapType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "AssetMap",
      "http://www.smpte-ra.org/schemas/429-9/2007/AM");
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::am::VolumeIndexType > (
      ::am::parseVolumeIndex (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::am::VolumeIndexType > (
      ::am::parseVolumeIndex (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::am::VolumeIndexType > (
      ::am::parseVolumeIndex (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::am::parseVolumeIndex (isrc, f, p);
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::am::parseVolumeIndex (isrc, h, f, p);
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::am::parseVolumeIndex (isrc, h, f, p);
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::am::parseVolumeIndex (isrc, f, p);
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::am::parseVolumeIndex (isrc, h, f, p);
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::am::parseVolumeIndex (isrc, h, f, p);
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::am::VolumeIndexType > (
      ::am::parseVolumeIndex (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::am::VolumeIndexType > (
      ::am::parseVolumeIndex (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::am::VolumeIndexType > (
      ::am::parseVolumeIndex (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::am::VolumeIndexType > (
        ::am::parseVolumeIndex (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "VolumeIndex" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
    {
      ::std::unique_ptr< ::am::VolumeIndexType > r (
        ::xsd::cxx::tree::traits< ::am::VolumeIndexType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "VolumeIndex",
      "http://www.smpte-ra.org/schemas/429-9/2007/AM");
  }

  ::std::unique_ptr< ::am::VolumeIndexType >
  parseVolumeIndex (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "VolumeIndex" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
    {
      ::std::unique_ptr< ::am::VolumeIndexType > r (
        ::xsd::cxx::tree::traits< ::am::VolumeIndexType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "VolumeIndex",
      "http://www.smpte-ra.org/schemas/429-9/2007/AM");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace am
{
  void
  operator<< (::xercesc::DOMElement& e, const UUID& i)
  {
    e << static_cast< const ::xml_schema::Uri& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UUID& i)
  {
    a << static_cast< const ::xml_schema::Uri& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const UUID& i)
  {
    l << static_cast< const ::xml_schema::Uri& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const UserText& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);

    // language
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "language",
          e));

      a << i.getLanguage ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ChunkType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Path
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Path",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getPath ();
    }

    // VolumeIndex
    //
    if (i.getVolumeIndex ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "VolumeIndex",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << *i.getVolumeIndex ();
    }

    // Offset
    //
    if (i.getOffset ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Offset",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << *i.getOffset ();
    }

    // Length
    //
    if (i.getLength ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Length",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << *i.getLength ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const AssetType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Id",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getId ();
    }

    // AnnotationText
    //
    if (i.getAnnotationText ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AnnotationText",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << *i.getAnnotationText ();
    }

    // PackingList
    //
    if (i.getPackingList ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PackingList",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << *i.getPackingList ();
    }

    // ChunkList
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ChunkList",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getChunkList ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const AssetMapType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Id",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getId ();
    }

    // AnnotationText
    //
    if (i.getAnnotationText ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AnnotationText",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << *i.getAnnotationText ();
    }

    // Creator
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Creator",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getCreator ();
    }

    // VolumeCount
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "VolumeCount",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getVolumeCount ();
    }

    // IssueDate
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IssueDate",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getIssueDate ();
    }

    // Issuer
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Issuer",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getIssuer ();
    }

    // AssetList
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AssetList",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getAssetList ();
    }
  }

  void
  serializeAssetMap (::std::ostream& o,
                     const ::am::AssetMapType& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeAssetMap (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeAssetMap (::std::ostream& o,
                     const ::am::AssetMapType& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeAssetMap (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeAssetMap (::std::ostream& o,
                     const ::am::AssetMapType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeAssetMap (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeAssetMap (::xercesc::XMLFormatTarget& t,
                     const ::am::AssetMapType& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeAssetMap (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeAssetMap (::xercesc::XMLFormatTarget& t,
                     const ::am::AssetMapType& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeAssetMap (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeAssetMap (::xercesc::XMLFormatTarget& t,
                     const ::am::AssetMapType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeAssetMap (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeAssetMap (::xercesc::DOMDocument& d,
                     const ::am::AssetMapType& s,
                     ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "AssetMap" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AssetMap",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeAssetMap (const ::am::AssetMapType& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "AssetMap",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM",
        m, f));

    ::am::serializeAssetMap (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const VolumeIndexType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Index
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Index",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << i.getIndex ();
    }
  }

  void
  serializeVolumeIndex (::std::ostream& o,
                        const ::am::VolumeIndexType& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeVolumeIndex (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeVolumeIndex (::std::ostream& o,
                        const ::am::VolumeIndexType& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeVolumeIndex (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeVolumeIndex (::std::ostream& o,
                        const ::am::VolumeIndexType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeVolumeIndex (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeVolumeIndex (::xercesc::XMLFormatTarget& t,
                        const ::am::VolumeIndexType& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeVolumeIndex (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeVolumeIndex (::xercesc::XMLFormatTarget& t,
                        const ::am::VolumeIndexType& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeVolumeIndex (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeVolumeIndex (::xercesc::XMLFormatTarget& t,
                        const ::am::VolumeIndexType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::am::serializeVolumeIndex (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeVolumeIndex (::xercesc::DOMDocument& d,
                        const ::am::VolumeIndexType& s,
                        ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "VolumeIndex" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/429-9/2007/AM")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "VolumeIndex",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeVolumeIndex (const ::am::VolumeIndexType& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "VolumeIndex",
        "http://www.smpte-ra.org/schemas/429-9/2007/AM",
        m, f));

    ::am::serializeVolumeIndex (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const AssetType_ChunkListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Chunk
    //
    for (AssetType_ChunkListType::ChunkConstIterator
         b (i.getChunk ().begin ()), n (i.getChunk ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Chunk",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const AssetMapType_AssetListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Asset
    //
    for (AssetMapType_AssetListType::AssetConstIterator
         b (i.getAsset ().begin ()), n (i.getAsset ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Asset",
          "http://www.smpte-ra.org/schemas/429-9/2007/AM",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

