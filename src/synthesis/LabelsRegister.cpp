// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "LabelsRegister.h"

namespace lr
{
  // LabelEntry
  // 

  const LabelEntry::RegisterOptional& LabelEntry::
  getRegister () const
  {
    return this->Register_;
  }

  LabelEntry::RegisterOptional& LabelEntry::
  getRegister ()
  {
    return this->Register_;
  }

  void LabelEntry::
  setRegister (const RegisterType& x)
  {
    this->Register_.set (x);
  }

  void LabelEntry::
  setRegister (const RegisterOptional& x)
  {
    this->Register_ = x;
  }

  void LabelEntry::
  setRegister (::std::unique_ptr< RegisterType > x)
  {
    this->Register_.set (std::move (x));
  }

  const LabelEntry::NamespaceNameType& LabelEntry::
  getNamespaceName () const
  {
    return this->NamespaceName_.get ();
  }

  LabelEntry::NamespaceNameType& LabelEntry::
  getNamespaceName ()
  {
    return this->NamespaceName_.get ();
  }

  void LabelEntry::
  setNamespaceName (const NamespaceNameType& x)
  {
    this->NamespaceName_.set (x);
  }

  void LabelEntry::
  setNamespaceName (::std::unique_ptr< NamespaceNameType > x)
  {
    this->NamespaceName_.set (std::move (x));
  }

  const LabelEntry::SymbolType& LabelEntry::
  getSymbol () const
  {
    return this->Symbol_.get ();
  }

  LabelEntry::SymbolType& LabelEntry::
  getSymbol ()
  {
    return this->Symbol_.get ();
  }

  void LabelEntry::
  setSymbol (const SymbolType& x)
  {
    this->Symbol_.set (x);
  }

  void LabelEntry::
  setSymbol (::std::unique_ptr< SymbolType > x)
  {
    this->Symbol_.set (std::move (x));
  }

  const LabelEntry::ULType& LabelEntry::
  getUL () const
  {
    return this->UL_.get ();
  }

  LabelEntry::ULType& LabelEntry::
  getUL ()
  {
    return this->UL_.get ();
  }

  void LabelEntry::
  setUL (const ULType& x)
  {
    this->UL_.set (x);
  }

  void LabelEntry::
  setUL (::std::unique_ptr< ULType > x)
  {
    this->UL_.set (std::move (x));
  }

  const LabelEntry::KindOptional& LabelEntry::
  getKind () const
  {
    return this->Kind_;
  }

  LabelEntry::KindOptional& LabelEntry::
  getKind ()
  {
    return this->Kind_;
  }

  void LabelEntry::
  setKind (const KindType& x)
  {
    this->Kind_.set (x);
  }

  void LabelEntry::
  setKind (const KindOptional& x)
  {
    this->Kind_ = x;
  }

  void LabelEntry::
  setKind (::std::unique_ptr< KindType > x)
  {
    this->Kind_.set (std::move (x));
  }

  const LabelEntry::NameOptional& LabelEntry::
  getName () const
  {
    return this->Name_;
  }

  LabelEntry::NameOptional& LabelEntry::
  getName ()
  {
    return this->Name_;
  }

  void LabelEntry::
  setName (const NameType& x)
  {
    this->Name_.set (x);
  }

  void LabelEntry::
  setName (const NameOptional& x)
  {
    this->Name_ = x;
  }

  void LabelEntry::
  setName (::std::unique_ptr< NameType > x)
  {
    this->Name_.set (std::move (x));
  }

  const LabelEntry::DefinitionOptional& LabelEntry::
  getDefinition () const
  {
    return this->Definition_;
  }

  LabelEntry::DefinitionOptional& LabelEntry::
  getDefinition ()
  {
    return this->Definition_;
  }

  void LabelEntry::
  setDefinition (const DefinitionType& x)
  {
    this->Definition_.set (x);
  }

  void LabelEntry::
  setDefinition (const DefinitionOptional& x)
  {
    this->Definition_ = x;
  }

  void LabelEntry::
  setDefinition (::std::unique_ptr< DefinitionType > x)
  {
    this->Definition_.set (std::move (x));
  }

  const LabelEntry::ApplicationsOptional& LabelEntry::
  getApplications () const
  {
    return this->Applications_;
  }

  LabelEntry::ApplicationsOptional& LabelEntry::
  getApplications ()
  {
    return this->Applications_;
  }

  void LabelEntry::
  setApplications (const ApplicationsType& x)
  {
    this->Applications_.set (x);
  }

  void LabelEntry::
  setApplications (const ApplicationsOptional& x)
  {
    this->Applications_ = x;
  }

  void LabelEntry::
  setApplications (::std::unique_ptr< ApplicationsType > x)
  {
    this->Applications_.set (std::move (x));
  }

  const LabelEntry::NotesOptional& LabelEntry::
  getNotes () const
  {
    return this->Notes_;
  }

  LabelEntry::NotesOptional& LabelEntry::
  getNotes ()
  {
    return this->Notes_;
  }

  void LabelEntry::
  setNotes (const NotesType& x)
  {
    this->Notes_.set (x);
  }

  void LabelEntry::
  setNotes (const NotesOptional& x)
  {
    this->Notes_ = x;
  }

  void LabelEntry::
  setNotes (::std::unique_ptr< NotesType > x)
  {
    this->Notes_.set (std::move (x));
  }

  const LabelEntry::DefiningDocumentOptional& LabelEntry::
  getDefiningDocument () const
  {
    return this->DefiningDocument_;
  }

  LabelEntry::DefiningDocumentOptional& LabelEntry::
  getDefiningDocument ()
  {
    return this->DefiningDocument_;
  }

  void LabelEntry::
  setDefiningDocument (const DefiningDocumentType& x)
  {
    this->DefiningDocument_.set (x);
  }

  void LabelEntry::
  setDefiningDocument (const DefiningDocumentOptional& x)
  {
    this->DefiningDocument_ = x;
  }

  void LabelEntry::
  setDefiningDocument (::std::unique_ptr< DefiningDocumentType > x)
  {
    this->DefiningDocument_.set (std::move (x));
  }

  const LabelEntry::IsDeprecatedType& LabelEntry::
  getIsDeprecated () const
  {
    return this->IsDeprecated_.get ();
  }

  LabelEntry::IsDeprecatedType& LabelEntry::
  getIsDeprecated ()
  {
    return this->IsDeprecated_.get ();
  }

  void LabelEntry::
  setIsDeprecated (const IsDeprecatedType& x)
  {
    this->IsDeprecated_.set (x);
  }


  // LabelsRegister
  // 

  const LabelsRegister::EntriesOptional& LabelsRegister::
  getEntries () const
  {
    return this->Entries_;
  }

  LabelsRegister::EntriesOptional& LabelsRegister::
  getEntries ()
  {
    return this->Entries_;
  }

  void LabelsRegister::
  setEntries (const EntriesType& x)
  {
    this->Entries_.set (x);
  }

  void LabelsRegister::
  setEntries (const EntriesOptional& x)
  {
    this->Entries_ = x;
  }

  void LabelsRegister::
  setEntries (::std::unique_ptr< EntriesType > x)
  {
    this->Entries_.set (std::move (x));
  }


  // LabelEntry_KindType
  // 

  LabelEntry_KindType::
  LabelEntry_KindType (Value v)
  : ::xml_schema::String (_xsd_LabelEntry_KindType_literals_[v])
  {
  }

  LabelEntry_KindType::
  LabelEntry_KindType (const char* v)
  : ::xml_schema::String (v)
  {
  }

  LabelEntry_KindType::
  LabelEntry_KindType (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  LabelEntry_KindType::
  LabelEntry_KindType (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  LabelEntry_KindType::
  LabelEntry_KindType (const LabelEntry_KindType& v,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  LabelEntry_KindType& LabelEntry_KindType::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_LabelEntry_KindType_literals_[v]);

    return *this;
  }


  // LabelsRegister_EntriesType
  // 

  const LabelsRegister_EntriesType::EntrySequence& LabelsRegister_EntriesType::
  getEntry () const
  {
    return this->Entry_;
  }

  LabelsRegister_EntriesType::EntrySequence& LabelsRegister_EntriesType::
  getEntry ()
  {
    return this->Entry_;
  }

  void LabelsRegister_EntriesType::
  setEntry (const EntrySequence& s)
  {
    this->Entry_ = s;
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace lr
{
  // LabelEntry
  //

  LabelEntry::
  LabelEntry (const NamespaceNameType& NamespaceName,
              const SymbolType& Symbol,
              const ULType& UL,
              const IsDeprecatedType& IsDeprecated)
  : ::xml_schema::Type (),
    Register_ (this),
    NamespaceName_ (NamespaceName, this),
    Symbol_ (Symbol, this),
    UL_ (UL, this),
    Kind_ (this),
    Name_ (this),
    Definition_ (this),
    Applications_ (this),
    Notes_ (this),
    DefiningDocument_ (this),
    IsDeprecated_ (IsDeprecated, this)
  {
  }

  LabelEntry::
  LabelEntry (const LabelEntry& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Register_ (x.Register_, f, this),
    NamespaceName_ (x.NamespaceName_, f, this),
    Symbol_ (x.Symbol_, f, this),
    UL_ (x.UL_, f, this),
    Kind_ (x.Kind_, f, this),
    Name_ (x.Name_, f, this),
    Definition_ (x.Definition_, f, this),
    Applications_ (x.Applications_, f, this),
    Notes_ (x.Notes_, f, this),
    DefiningDocument_ (x.DefiningDocument_, f, this),
    IsDeprecated_ (x.IsDeprecated_, f, this)
  {
  }

  LabelEntry::
  LabelEntry (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Register_ (this),
    NamespaceName_ (this),
    Symbol_ (this),
    UL_ (this),
    Kind_ (this),
    Name_ (this),
    Definition_ (this),
    Applications_ (this),
    Notes_ (this),
    DefiningDocument_ (this),
    IsDeprecated_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void LabelEntry::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Register
      //
      if (n.name () == "Register" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< RegisterType > r (
          RegisterTraits::create (i, f, this));

        if (!this->Register_)
        {
          this->Register_.set (::std::move (r));
          continue;
        }
      }

      // NamespaceName
      //
      if (n.name () == "NamespaceName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< NamespaceNameType > r (
          NamespaceNameTraits::create (i, f, this));

        if (!NamespaceName_.present ())
        {
          this->NamespaceName_.set (::std::move (r));
          continue;
        }
      }

      // Symbol
      //
      if (n.name () == "Symbol" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< SymbolType > r (
          SymbolTraits::create (i, f, this));

        if (!Symbol_.present ())
        {
          this->Symbol_.set (::std::move (r));
          continue;
        }
      }

      // UL
      //
      if (n.name () == "UL" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< ULType > r (
          ULTraits::create (i, f, this));

        if (!UL_.present ())
        {
          this->UL_.set (::std::move (r));
          continue;
        }
      }

      // Kind
      //
      if (n.name () == "Kind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< KindType > r (
          KindTraits::create (i, f, this));

        if (!this->Kind_)
        {
          this->Kind_.set (::std::move (r));
          continue;
        }
      }

      // Name
      //
      if (n.name () == "Name" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< NameType > r (
          NameTraits::create (i, f, this));

        if (!this->Name_)
        {
          this->Name_.set (::std::move (r));
          continue;
        }
      }

      // Definition
      //
      if (n.name () == "Definition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< DefinitionType > r (
          DefinitionTraits::create (i, f, this));

        if (!this->Definition_)
        {
          this->Definition_.set (::std::move (r));
          continue;
        }
      }

      // Applications
      //
      if (n.name () == "Applications" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< ApplicationsType > r (
          ApplicationsTraits::create (i, f, this));

        if (!this->Applications_)
        {
          this->Applications_.set (::std::move (r));
          continue;
        }
      }

      // Notes
      //
      if (n.name () == "Notes" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< NotesType > r (
          NotesTraits::create (i, f, this));

        if (!this->Notes_)
        {
          this->Notes_.set (::std::move (r));
          continue;
        }
      }

      // DefiningDocument
      //
      if (n.name () == "DefiningDocument" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< DefiningDocumentType > r (
          DefiningDocumentTraits::create (i, f, this));

        if (!this->DefiningDocument_)
        {
          this->DefiningDocument_.set (::std::move (r));
          continue;
        }
      }

      // IsDeprecated
      //
      if (n.name () == "IsDeprecated" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        if (!IsDeprecated_.present ())
        {
          this->IsDeprecated_.set (IsDeprecatedTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!NamespaceName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "NamespaceName",
        "http://www.smpte-ra.org/schemas/400/2012");
    }

    if (!Symbol_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Symbol",
        "http://www.smpte-ra.org/schemas/400/2012");
    }

    if (!UL_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "UL",
        "http://www.smpte-ra.org/schemas/400/2012");
    }

    if (!IsDeprecated_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IsDeprecated",
        "http://www.smpte-ra.org/schemas/400/2012");
    }
  }

  LabelEntry* LabelEntry::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class LabelEntry (*this, f, c);
  }

  LabelEntry& LabelEntry::
  operator= (const LabelEntry& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Register_ = x.Register_;
      this->NamespaceName_ = x.NamespaceName_;
      this->Symbol_ = x.Symbol_;
      this->UL_ = x.UL_;
      this->Kind_ = x.Kind_;
      this->Name_ = x.Name_;
      this->Definition_ = x.Definition_;
      this->Applications_ = x.Applications_;
      this->Notes_ = x.Notes_;
      this->DefiningDocument_ = x.DefiningDocument_;
      this->IsDeprecated_ = x.IsDeprecated_;
    }

    return *this;
  }

  LabelEntry::
  ~LabelEntry ()
  {
  }

  // LabelsRegister
  //

  LabelsRegister::
  LabelsRegister ()
  : ::xml_schema::Type (),
    Entries_ (this)
  {
  }

  LabelsRegister::
  LabelsRegister (const LabelsRegister& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Entries_ (x.Entries_, f, this)
  {
  }

  LabelsRegister::
  LabelsRegister (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Entries_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void LabelsRegister::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Entries
      //
      if (n.name () == "Entries" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< EntriesType > r (
          EntriesTraits::create (i, f, this));

        if (!this->Entries_)
        {
          this->Entries_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  LabelsRegister* LabelsRegister::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class LabelsRegister (*this, f, c);
  }

  LabelsRegister& LabelsRegister::
  operator= (const LabelsRegister& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Entries_ = x.Entries_;
    }

    return *this;
  }

  LabelsRegister::
  ~LabelsRegister ()
  {
  }

  // LabelEntry_KindType
  //

  LabelEntry_KindType::
  LabelEntry_KindType (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_LabelEntry_KindType_convert ();
  }

  LabelEntry_KindType::
  LabelEntry_KindType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_LabelEntry_KindType_convert ();
  }

  LabelEntry_KindType::
  LabelEntry_KindType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_LabelEntry_KindType_convert ();
  }

  LabelEntry_KindType* LabelEntry_KindType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class LabelEntry_KindType (*this, f, c);
  }

  LabelEntry_KindType::Value LabelEntry_KindType::
  _xsd_LabelEntry_KindType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LabelEntry_KindType_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_LabelEntry_KindType_indexes_,
                      _xsd_LabelEntry_KindType_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_LabelEntry_KindType_indexes_ + 2 || _xsd_LabelEntry_KindType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const LabelEntry_KindType::
  _xsd_LabelEntry_KindType_literals_[2] =
  {
    "NODE",
    "LEAF"
  };

  const LabelEntry_KindType::Value LabelEntry_KindType::
  _xsd_LabelEntry_KindType_indexes_[2] =
  {
    ::lr::LabelEntry_KindType::LEAF,
    ::lr::LabelEntry_KindType::NODE
  };

  // LabelsRegister_EntriesType
  //

  LabelsRegister_EntriesType::
  LabelsRegister_EntriesType ()
  : ::xml_schema::Type (),
    Entry_ (this)
  {
  }

  LabelsRegister_EntriesType::
  LabelsRegister_EntriesType (const LabelsRegister_EntriesType& x,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Entry_ (x.Entry_, f, this)
  {
  }

  LabelsRegister_EntriesType::
  LabelsRegister_EntriesType (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Entry_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void LabelsRegister_EntriesType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Entry
      //
      if (n.name () == "Entry" && n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
      {
        ::std::unique_ptr< EntryType > r (
          EntryTraits::create (i, f, this));

        this->Entry_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  LabelsRegister_EntriesType* LabelsRegister_EntriesType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class LabelsRegister_EntriesType (*this, f, c);
  }

  LabelsRegister_EntriesType& LabelsRegister_EntriesType::
  operator= (const LabelsRegister_EntriesType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Entry_ = x.Entry_;
    }

    return *this;
  }

  LabelsRegister_EntriesType::
  ~LabelsRegister_EntriesType ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace lr
{
  ::std::ostream&
  operator<< (::std::ostream& o, const LabelEntry& i)
  {
    if (i.getRegister ())
    {
      o << ::std::endl << "Register: " << *i.getRegister ();
    }

    o << ::std::endl << "NamespaceName: " << i.getNamespaceName ();
    o << ::std::endl << "Symbol: " << i.getSymbol ();
    o << ::std::endl << "UL: " << i.getUL ();
    if (i.getKind ())
    {
      o << ::std::endl << "Kind: " << *i.getKind ();
    }

    if (i.getName ())
    {
      o << ::std::endl << "Name: " << *i.getName ();
    }

    if (i.getDefinition ())
    {
      o << ::std::endl << "Definition: " << *i.getDefinition ();
    }

    if (i.getApplications ())
    {
      o << ::std::endl << "Applications: " << *i.getApplications ();
    }

    if (i.getNotes ())
    {
      o << ::std::endl << "Notes: " << *i.getNotes ();
    }

    if (i.getDefiningDocument ())
    {
      o << ::std::endl << "DefiningDocument: " << *i.getDefiningDocument ();
    }

    o << ::std::endl << "IsDeprecated: " << i.getIsDeprecated ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LabelsRegister& i)
  {
    if (i.getEntries ())
    {
      o << ::std::endl << "Entries: " << *i.getEntries ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, LabelEntry_KindType::Value i)
  {
    return o << LabelEntry_KindType::_xsd_LabelEntry_KindType_literals_[i];
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LabelEntry_KindType& i)
  {
    return o << static_cast< const ::xml_schema::String& > (i);
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const LabelsRegister_EntriesType& i)
  {
    for (LabelsRegister_EntriesType::EntryConstIterator
         b (i.getEntry ().begin ()), e (i.getEntry ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Entry: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace lr
{
  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::lr::LabelsRegister > (
      ::lr::parseLabelsRegister (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::lr::LabelsRegister > (
      ::lr::parseLabelsRegister (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::lr::LabelsRegister > (
      ::lr::parseLabelsRegister (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::lr::parseLabelsRegister (isrc, f, p);
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::lr::parseLabelsRegister (isrc, h, f, p);
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::lr::parseLabelsRegister (isrc, h, f, p);
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::lr::parseLabelsRegister (isrc, f, p);
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::lr::parseLabelsRegister (isrc, h, f, p);
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::lr::parseLabelsRegister (isrc, h, f, p);
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::lr::LabelsRegister > (
      ::lr::parseLabelsRegister (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::lr::LabelsRegister > (
      ::lr::parseLabelsRegister (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::lr::LabelsRegister > (
      ::lr::parseLabelsRegister (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::lr::LabelsRegister > (
        ::lr::parseLabelsRegister (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "LabelsRegister" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
    {
      ::std::unique_ptr< ::lr::LabelsRegister > r (
        ::xsd::cxx::tree::traits< ::lr::LabelsRegister, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LabelsRegister",
      "http://www.smpte-ra.org/schemas/400/2012");
  }

  ::std::unique_ptr< ::lr::LabelsRegister >
  parseLabelsRegister (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "LabelsRegister" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
    {
      ::std::unique_ptr< ::lr::LabelsRegister > r (
        ::xsd::cxx::tree::traits< ::lr::LabelsRegister, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LabelsRegister",
      "http://www.smpte-ra.org/schemas/400/2012");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace lr
{
  void
  serializeLabelsRegister (::std::ostream& o,
                           const ::lr::LabelsRegister& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::lr::serializeLabelsRegister (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeLabelsRegister (::std::ostream& o,
                           const ::lr::LabelsRegister& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::lr::serializeLabelsRegister (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeLabelsRegister (::std::ostream& o,
                           const ::lr::LabelsRegister& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::lr::serializeLabelsRegister (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeLabelsRegister (::xercesc::XMLFormatTarget& t,
                           const ::lr::LabelsRegister& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::lr::serializeLabelsRegister (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeLabelsRegister (::xercesc::XMLFormatTarget& t,
                           const ::lr::LabelsRegister& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::lr::serializeLabelsRegister (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeLabelsRegister (::xercesc::XMLFormatTarget& t,
                           const ::lr::LabelsRegister& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::lr::serializeLabelsRegister (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeLabelsRegister (::xercesc::DOMDocument& d,
                           const ::lr::LabelsRegister& s,
                           ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "LabelsRegister" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/400/2012")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LabelsRegister",
        "http://www.smpte-ra.org/schemas/400/2012");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeLabelsRegister (const ::lr::LabelsRegister& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "LabelsRegister",
        "http://www.smpte-ra.org/schemas/400/2012",
        m, f));

    ::lr::serializeLabelsRegister (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const LabelEntry& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Register
    //
    if (i.getRegister ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Register",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << *i.getRegister ();
    }

    // NamespaceName
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "NamespaceName",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << i.getNamespaceName ();
    }

    // Symbol
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Symbol",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << i.getSymbol ();
    }

    // UL
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "UL",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << i.getUL ();
    }

    // Kind
    //
    if (i.getKind ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Kind",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << *i.getKind ();
    }

    // Name
    //
    if (i.getName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Name",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << *i.getName ();
    }

    // Definition
    //
    if (i.getDefinition ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Definition",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << *i.getDefinition ();
    }

    // Applications
    //
    if (i.getApplications ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Applications",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << *i.getApplications ();
    }

    // Notes
    //
    if (i.getNotes ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Notes",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << *i.getNotes ();
    }

    // DefiningDocument
    //
    if (i.getDefiningDocument ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DefiningDocument",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << *i.getDefiningDocument ();
    }

    // IsDeprecated
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IsDeprecated",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << i.getIsDeprecated ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const LabelsRegister& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Entries
    //
    if (i.getEntries ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Entries",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << *i.getEntries ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const LabelEntry_KindType& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const LabelEntry_KindType& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const LabelEntry_KindType& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const LabelsRegister_EntriesType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Entry
    //
    for (LabelsRegister_EntriesType::EntryConstIterator
         b (i.getEntry ().begin ()), n (i.getEntry ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Entry",
          "http://www.smpte-ra.org/schemas/400/2012",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

