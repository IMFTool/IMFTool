// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "st2067-203a-20XX.h"

namespace imfsadm
{
  // MGASADMSoundfieldGroupSelectorType
  // 

  const MGASADMSoundfieldGroupSelectorType::ResourceIdType& MGASADMSoundfieldGroupSelectorType::
  getResourceId () const
  {
    return this->ResourceId_.get ();
  }

  MGASADMSoundfieldGroupSelectorType::ResourceIdType& MGASADMSoundfieldGroupSelectorType::
  getResourceId ()
  {
    return this->ResourceId_.get ();
  }

  void MGASADMSoundfieldGroupSelectorType::
  setResourceId (const ResourceIdType& x)
  {
    this->ResourceId_.set (x);
  }

  void MGASADMSoundfieldGroupSelectorType::
  setResourceId (::std::unique_ptr< ResourceIdType > x)
  {
    this->ResourceId_.set (std::move (x));
  }

  const MGASADMSoundfieldGroupSelectorType::MGASoundfieldGroupLinkIDSequence& MGASADMSoundfieldGroupSelectorType::
  getMGASoundfieldGroupLinkID () const
  {
    return this->MGASoundfieldGroupLinkID_;
  }

  MGASADMSoundfieldGroupSelectorType::MGASoundfieldGroupLinkIDSequence& MGASADMSoundfieldGroupSelectorType::
  getMGASoundfieldGroupLinkID ()
  {
    return this->MGASoundfieldGroupLinkID_;
  }

  void MGASADMSoundfieldGroupSelectorType::
  setMGASoundfieldGroupLinkID (const MGASoundfieldGroupLinkIDSequence& s)
  {
    this->MGASoundfieldGroupLinkID_ = s;
  }


  // MGASADMVirtualTrackParameterSet
  // 

  const MGASADMVirtualTrackParameterSet::IdType& MGASADMVirtualTrackParameterSet::
  getId () const
  {
    return this->Id_.get ();
  }

  MGASADMVirtualTrackParameterSet::IdType& MGASADMVirtualTrackParameterSet::
  getId ()
  {
    return this->Id_.get ();
  }

  void MGASADMVirtualTrackParameterSet::
  setId (const IdType& x)
  {
    this->Id_.set (x);
  }

  void MGASADMVirtualTrackParameterSet::
  setId (::std::unique_ptr< IdType > x)
  {
    this->Id_.set (std::move (x));
  }

  const MGASADMVirtualTrackParameterSet::TrackIdType& MGASADMVirtualTrackParameterSet::
  getTrackId () const
  {
    return this->TrackId_.get ();
  }

  MGASADMVirtualTrackParameterSet::TrackIdType& MGASADMVirtualTrackParameterSet::
  getTrackId ()
  {
    return this->TrackId_.get ();
  }

  void MGASADMVirtualTrackParameterSet::
  setTrackId (const TrackIdType& x)
  {
    this->TrackId_.set (x);
  }

  void MGASADMVirtualTrackParameterSet::
  setTrackId (::std::unique_ptr< TrackIdType > x)
  {
    this->TrackId_.set (std::move (x));
  }

  const MGASADMVirtualTrackParameterSet::MGASADMOperationalModeType& MGASADMVirtualTrackParameterSet::
  getMGASADMOperationalMode () const
  {
    return this->MGASADMOperationalMode_.get ();
  }

  MGASADMVirtualTrackParameterSet::MGASADMOperationalModeType& MGASADMVirtualTrackParameterSet::
  getMGASADMOperationalMode ()
  {
    return this->MGASADMOperationalMode_.get ();
  }

  void MGASADMVirtualTrackParameterSet::
  setMGASADMOperationalMode (const MGASADMOperationalModeType& x)
  {
    this->MGASADMOperationalMode_.set (x);
  }

  void MGASADMVirtualTrackParameterSet::
  setMGASADMOperationalMode (::std::unique_ptr< MGASADMOperationalModeType > x)
  {
    this->MGASADMOperationalMode_.set (std::move (x));
  }

  const MGASADMVirtualTrackParameterSet::MGASADMSoundfieldGroupSelectorSequence& MGASADMVirtualTrackParameterSet::
  getMGASADMSoundfieldGroupSelector () const
  {
    return this->MGASADMSoundfieldGroupSelector_;
  }

  MGASADMVirtualTrackParameterSet::MGASADMSoundfieldGroupSelectorSequence& MGASADMVirtualTrackParameterSet::
  getMGASADMSoundfieldGroupSelector ()
  {
    return this->MGASADMSoundfieldGroupSelector_;
  }

  void MGASADMVirtualTrackParameterSet::
  setMGASADMSoundfieldGroupSelector (const MGASADMSoundfieldGroupSelectorSequence& s)
  {
    this->MGASADMSoundfieldGroupSelector_ = s;
  }

  const MGASADMVirtualTrackParameterSet::AnySequence& MGASADMVirtualTrackParameterSet::
  getAny () const
  {
    return this->any_;
  }

  MGASADMVirtualTrackParameterSet::AnySequence& MGASADMVirtualTrackParameterSet::
  getAny ()
  {
    return this->any_;
  }

  void MGASADMVirtualTrackParameterSet::
  setAny (const AnySequence& s)
  {
    this->any_ = s;
  }

  const ::xercesc::DOMDocument& MGASADMVirtualTrackParameterSet::
  getDomDocument () const
  {
    return *this->dom_document_;
  }

  ::xercesc::DOMDocument& MGASADMVirtualTrackParameterSet::
  getDomDocument ()
  {
    return *this->dom_document_;
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace imfsadm
{
  // MGASADMSoundfieldGroupSelectorType
  //

  MGASADMSoundfieldGroupSelectorType::
  MGASADMSoundfieldGroupSelectorType (const ResourceIdType& ResourceId)
  : ::xml_schema::Type (),
    ResourceId_ (ResourceId, this),
    MGASoundfieldGroupLinkID_ (this)
  {
  }

  MGASADMSoundfieldGroupSelectorType::
  MGASADMSoundfieldGroupSelectorType (const MGASADMSoundfieldGroupSelectorType& x,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    ResourceId_ (x.ResourceId_, f, this),
    MGASoundfieldGroupLinkID_ (x.MGASoundfieldGroupLinkID_, f, this)
  {
  }

  MGASADMSoundfieldGroupSelectorType::
  MGASADMSoundfieldGroupSelectorType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    ResourceId_ (this),
    MGASoundfieldGroupLinkID_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void MGASADMSoundfieldGroupSelectorType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ResourceId
      //
      if (n.name () == "ResourceId" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-203/2022")
      {
        ::std::unique_ptr< ResourceIdType > r (
          ResourceIdTraits::create (i, f, this));

        if (!ResourceId_.present ())
        {
          this->ResourceId_.set (::std::move (r));
          continue;
        }
      }

      // MGASoundfieldGroupLinkID
      //
      if (n.name () == "MGASoundfieldGroupLinkID" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-203/2022")
      {
        ::std::unique_ptr< MGASoundfieldGroupLinkIDType > r (
          MGASoundfieldGroupLinkIDTraits::create (i, f, this));

        this->MGASoundfieldGroupLinkID_.push_back (::std::move (r));
        continue;
      }

      break;
    }

    if (!ResourceId_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ResourceId",
        "http://www.smpte-ra.org/ns/2067-203/2022");
    }
  }

  MGASADMSoundfieldGroupSelectorType* MGASADMSoundfieldGroupSelectorType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MGASADMSoundfieldGroupSelectorType (*this, f, c);
  }

  MGASADMSoundfieldGroupSelectorType& MGASADMSoundfieldGroupSelectorType::
  operator= (const MGASADMSoundfieldGroupSelectorType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->ResourceId_ = x.ResourceId_;
      this->MGASoundfieldGroupLinkID_ = x.MGASoundfieldGroupLinkID_;
    }

    return *this;
  }

  MGASADMSoundfieldGroupSelectorType::
  ~MGASADMSoundfieldGroupSelectorType ()
  {
  }

  // MGASADMVirtualTrackParameterSet
  //

  MGASADMVirtualTrackParameterSet::
  MGASADMVirtualTrackParameterSet (const IdType& Id,
                                   const TrackIdType& TrackId,
                                   const MGASADMOperationalModeType& MGASADMOperationalMode)
  : ::xml_schema::Type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    Id_ (Id, this),
    TrackId_ (TrackId, this),
    MGASADMOperationalMode_ (MGASADMOperationalMode, this),
    MGASADMSoundfieldGroupSelector_ (this),
    any_ (this->getDomDocument ())
  {
  }

  MGASADMVirtualTrackParameterSet::
  MGASADMVirtualTrackParameterSet (const MGASADMVirtualTrackParameterSet& x,
                                   ::xml_schema::Flags f,
                                   ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    Id_ (x.Id_, f, this),
    TrackId_ (x.TrackId_, f, this),
    MGASADMOperationalMode_ (x.MGASADMOperationalMode_, f, this),
    MGASADMSoundfieldGroupSelector_ (x.MGASADMSoundfieldGroupSelector_, f, this),
    any_ (x.any_, this->getDomDocument ())
  {
  }

  MGASADMVirtualTrackParameterSet::
  MGASADMVirtualTrackParameterSet (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f,
                                   ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    Id_ (this),
    TrackId_ (this),
    MGASADMOperationalMode_ (this),
    MGASADMSoundfieldGroupSelector_ (this),
    any_ (this->getDomDocument ())
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void MGASADMVirtualTrackParameterSet::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Id
      //
      if (n.name () == "Id" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-203/2022")
      {
        ::std::unique_ptr< IdType > r (
          IdTraits::create (i, f, this));

        if (!Id_.present ())
        {
          this->Id_.set (::std::move (r));
          continue;
        }
      }

      // TrackId
      //
      if (n.name () == "TrackId" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-203/2022")
      {
        ::std::unique_ptr< TrackIdType > r (
          TrackIdTraits::create (i, f, this));

        if (!TrackId_.present ())
        {
          this->TrackId_.set (::std::move (r));
          continue;
        }
      }

      // MGASADMOperationalMode
      //
      if (n.name () == "MGASADMOperationalMode" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-203/2022")
      {
        ::std::unique_ptr< MGASADMOperationalModeType > r (
          MGASADMOperationalModeTraits::create (i, f, this));

        if (!MGASADMOperationalMode_.present ())
        {
          this->MGASADMOperationalMode_.set (::std::move (r));
          continue;
        }
      }

      // MGASADMSoundfieldGroupSelector
      //
      if (n.name () == "MGASADMSoundfieldGroupSelector" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-203/2022")
      {
        ::std::unique_ptr< MGASADMSoundfieldGroupSelectorType > r (
          MGASADMSoundfieldGroupSelectorTraits::create (i, f, this));

        this->MGASADMSoundfieldGroupSelector_.push_back (::std::move (r));
        continue;
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://www.smpte-ra.org/ns/2067-203/2022"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any_.push_back (r);
        continue;
      }

      break;
    }

    if (!Id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Id",
        "http://www.smpte-ra.org/ns/2067-203/2022");
    }

    if (!TrackId_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "TrackId",
        "http://www.smpte-ra.org/ns/2067-203/2022");
    }

    if (!MGASADMOperationalMode_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "MGASADMOperationalMode",
        "http://www.smpte-ra.org/ns/2067-203/2022");
    }
  }

  MGASADMVirtualTrackParameterSet* MGASADMVirtualTrackParameterSet::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MGASADMVirtualTrackParameterSet (*this, f, c);
  }

  MGASADMVirtualTrackParameterSet& MGASADMVirtualTrackParameterSet::
  operator= (const MGASADMVirtualTrackParameterSet& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Id_ = x.Id_;
      this->TrackId_ = x.TrackId_;
      this->MGASADMOperationalMode_ = x.MGASADMOperationalMode_;
      this->MGASADMSoundfieldGroupSelector_ = x.MGASADMSoundfieldGroupSelector_;
      this->any_ = x.any_;
    }

    return *this;
  }

  MGASADMVirtualTrackParameterSet::
  ~MGASADMVirtualTrackParameterSet ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace imfsadm
{
  ::std::ostream&
  operator<< (::std::ostream& o, const MGASADMSoundfieldGroupSelectorType& i)
  {
    o << ::std::endl << "ResourceId: " << i.getResourceId ();
    for (MGASADMSoundfieldGroupSelectorType::MGASoundfieldGroupLinkIDConstIterator
         b (i.getMGASoundfieldGroupLinkID ().begin ()), e (i.getMGASoundfieldGroupLinkID ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "MGASoundfieldGroupLinkID: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MGASADMVirtualTrackParameterSet& i)
  {
    o << ::std::endl << "Id: " << i.getId ();
    o << ::std::endl << "TrackId: " << i.getTrackId ();
    o << ::std::endl << "MGASADMOperationalMode: " << i.getMGASADMOperationalMode ();
    for (MGASADMVirtualTrackParameterSet::MGASADMSoundfieldGroupSelectorConstIterator
         b (i.getMGASADMSoundfieldGroupSelector ().begin ()), e (i.getMGASADMSoundfieldGroupSelector ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "MGASADMSoundfieldGroupSelector: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace imfsadm
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace imfsadm
{
  void
  operator<< (::xercesc::DOMElement& e, const MGASADMSoundfieldGroupSelectorType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // ResourceId
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ResourceId",
          "http://www.smpte-ra.org/ns/2067-203/2022",
          e));

      s << i.getResourceId ();
    }

    // MGASoundfieldGroupLinkID
    //
    for (MGASADMSoundfieldGroupSelectorType::MGASoundfieldGroupLinkIDConstIterator
         b (i.getMGASoundfieldGroupLinkID ().begin ()), n (i.getMGASoundfieldGroupLinkID ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MGASoundfieldGroupLinkID",
          "http://www.smpte-ra.org/ns/2067-203/2022",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const MGASADMVirtualTrackParameterSet& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Id",
          "http://www.smpte-ra.org/ns/2067-203/2022",
          e));

      s << i.getId ();
    }

    // TrackId
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "TrackId",
          "http://www.smpte-ra.org/ns/2067-203/2022",
          e));

      s << i.getTrackId ();
    }

    // MGASADMOperationalMode
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MGASADMOperationalMode",
          "http://www.smpte-ra.org/ns/2067-203/2022",
          e));

      s << i.getMGASADMOperationalMode ();
    }

    // MGASADMSoundfieldGroupSelector
    //
    for (MGASADMVirtualTrackParameterSet::MGASADMSoundfieldGroupSelectorConstIterator
         b (i.getMGASADMSoundfieldGroupSelector ().begin ()), n (i.getMGASADMSoundfieldGroupSelector ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MGASADMSoundfieldGroupSelector",
          "http://www.smpte-ra.org/ns/2067-203/2022",
          e));

      s << *b;
    }

    // any
    //
    for (MGASADMVirtualTrackParameterSet::AnyConstIterator
         b (i.getAny ().begin ()), n (i.getAny ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

