// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SMPTE-2067-9a-2018-Sidecar.h"

namespace scm
{
  // SidecarCompositionMapType
  // 

  const SidecarCompositionMapType::IdType& SidecarCompositionMapType::
  getId () const
  {
    return this->Id_.get ();
  }

  SidecarCompositionMapType::IdType& SidecarCompositionMapType::
  getId ()
  {
    return this->Id_.get ();
  }

  void SidecarCompositionMapType::
  setId (const IdType& x)
  {
    this->Id_.set (x);
  }

  void SidecarCompositionMapType::
  setId (::std::unique_ptr< IdType > x)
  {
    this->Id_.set (std::move (x));
  }

  const SidecarCompositionMapType::PropertiesType& SidecarCompositionMapType::
  getProperties () const
  {
    return this->Properties_.get ();
  }

  SidecarCompositionMapType::PropertiesType& SidecarCompositionMapType::
  getProperties ()
  {
    return this->Properties_.get ();
  }

  void SidecarCompositionMapType::
  setProperties (const PropertiesType& x)
  {
    this->Properties_.set (x);
  }

  void SidecarCompositionMapType::
  setProperties (::std::unique_ptr< PropertiesType > x)
  {
    this->Properties_.set (std::move (x));
  }

  const SidecarCompositionMapType::SidecarAssetListType& SidecarCompositionMapType::
  getSidecarAssetList () const
  {
    return this->SidecarAssetList_.get ();
  }

  SidecarCompositionMapType::SidecarAssetListType& SidecarCompositionMapType::
  getSidecarAssetList ()
  {
    return this->SidecarAssetList_.get ();
  }

  void SidecarCompositionMapType::
  setSidecarAssetList (const SidecarAssetListType& x)
  {
    this->SidecarAssetList_.set (x);
  }

  void SidecarCompositionMapType::
  setSidecarAssetList (::std::unique_ptr< SidecarAssetListType > x)
  {
    this->SidecarAssetList_.set (std::move (x));
  }

  const SidecarCompositionMapType::SignerOptional& SidecarCompositionMapType::
  getSigner () const
  {
    return this->Signer_;
  }

  SidecarCompositionMapType::SignerOptional& SidecarCompositionMapType::
  getSigner ()
  {
    return this->Signer_;
  }

  void SidecarCompositionMapType::
  setSigner (const SignerType& x)
  {
    this->Signer_.set (x);
  }

  void SidecarCompositionMapType::
  setSigner (const SignerOptional& x)
  {
    this->Signer_ = x;
  }

  void SidecarCompositionMapType::
  setSigner (::std::unique_ptr< SignerType > x)
  {
    this->Signer_.set (std::move (x));
  }

  const SidecarCompositionMapType::SignatureOptional& SidecarCompositionMapType::
  getSignature () const
  {
    return this->Signature_;
  }

  SidecarCompositionMapType::SignatureOptional& SidecarCompositionMapType::
  getSignature ()
  {
    return this->Signature_;
  }

  void SidecarCompositionMapType::
  setSignature (const SignatureType& x)
  {
    this->Signature_.set (x);
  }

  void SidecarCompositionMapType::
  setSignature (const SignatureOptional& x)
  {
    this->Signature_ = x;
  }

  void SidecarCompositionMapType::
  setSignature (::std::unique_ptr< SignatureType > x)
  {
    this->Signature_.set (std::move (x));
  }


  // SidecarAssetType
  // 

  const SidecarAssetType::IdType& SidecarAssetType::
  getId () const
  {
    return this->Id_.get ();
  }

  SidecarAssetType::IdType& SidecarAssetType::
  getId ()
  {
    return this->Id_.get ();
  }

  void SidecarAssetType::
  setId (const IdType& x)
  {
    this->Id_.set (x);
  }

  void SidecarAssetType::
  setId (::std::unique_ptr< IdType > x)
  {
    this->Id_.set (std::move (x));
  }

  const SidecarAssetType::AssociatedCPLListType& SidecarAssetType::
  getAssociatedCPLList () const
  {
    return this->AssociatedCPLList_.get ();
  }

  SidecarAssetType::AssociatedCPLListType& SidecarAssetType::
  getAssociatedCPLList ()
  {
    return this->AssociatedCPLList_.get ();
  }

  void SidecarAssetType::
  setAssociatedCPLList (const AssociatedCPLListType& x)
  {
    this->AssociatedCPLList_.set (x);
  }

  void SidecarAssetType::
  setAssociatedCPLList (::std::unique_ptr< AssociatedCPLListType > x)
  {
    this->AssociatedCPLList_.set (std::move (x));
  }


  // SidecarCompositionMapType_PropertiesType
  // 

  const SidecarCompositionMapType_PropertiesType::AnnotationOptional& SidecarCompositionMapType_PropertiesType::
  getAnnotation () const
  {
    return this->Annotation_;
  }

  SidecarCompositionMapType_PropertiesType::AnnotationOptional& SidecarCompositionMapType_PropertiesType::
  getAnnotation ()
  {
    return this->Annotation_;
  }

  void SidecarCompositionMapType_PropertiesType::
  setAnnotation (const AnnotationType& x)
  {
    this->Annotation_.set (x);
  }

  void SidecarCompositionMapType_PropertiesType::
  setAnnotation (const AnnotationOptional& x)
  {
    this->Annotation_ = x;
  }

  void SidecarCompositionMapType_PropertiesType::
  setAnnotation (::std::unique_ptr< AnnotationType > x)
  {
    this->Annotation_.set (std::move (x));
  }

  const SidecarCompositionMapType_PropertiesType::IssueDateType& SidecarCompositionMapType_PropertiesType::
  getIssueDate () const
  {
    return this->IssueDate_.get ();
  }

  SidecarCompositionMapType_PropertiesType::IssueDateType& SidecarCompositionMapType_PropertiesType::
  getIssueDate ()
  {
    return this->IssueDate_.get ();
  }

  void SidecarCompositionMapType_PropertiesType::
  setIssueDate (const IssueDateType& x)
  {
    this->IssueDate_.set (x);
  }

  void SidecarCompositionMapType_PropertiesType::
  setIssueDate (::std::unique_ptr< IssueDateType > x)
  {
    this->IssueDate_.set (std::move (x));
  }

  const SidecarCompositionMapType_PropertiesType::IssuerOptional& SidecarCompositionMapType_PropertiesType::
  getIssuer () const
  {
    return this->Issuer_;
  }

  SidecarCompositionMapType_PropertiesType::IssuerOptional& SidecarCompositionMapType_PropertiesType::
  getIssuer ()
  {
    return this->Issuer_;
  }

  void SidecarCompositionMapType_PropertiesType::
  setIssuer (const IssuerType& x)
  {
    this->Issuer_.set (x);
  }

  void SidecarCompositionMapType_PropertiesType::
  setIssuer (const IssuerOptional& x)
  {
    this->Issuer_ = x;
  }

  void SidecarCompositionMapType_PropertiesType::
  setIssuer (::std::unique_ptr< IssuerType > x)
  {
    this->Issuer_.set (std::move (x));
  }

  const SidecarCompositionMapType_PropertiesType::AnySequence& SidecarCompositionMapType_PropertiesType::
  getAny () const
  {
    return this->any_;
  }

  SidecarCompositionMapType_PropertiesType::AnySequence& SidecarCompositionMapType_PropertiesType::
  getAny ()
  {
    return this->any_;
  }

  void SidecarCompositionMapType_PropertiesType::
  setAny (const AnySequence& s)
  {
    this->any_ = s;
  }

  const ::xercesc::DOMDocument& SidecarCompositionMapType_PropertiesType::
  getDomDocument () const
  {
    return *this->dom_document_;
  }

  ::xercesc::DOMDocument& SidecarCompositionMapType_PropertiesType::
  getDomDocument ()
  {
    return *this->dom_document_;
  }


  // SidecarCompositionMapType_SidecarAssetListType
  // 

  const SidecarCompositionMapType_SidecarAssetListType::SidecarAssetSequence& SidecarCompositionMapType_SidecarAssetListType::
  getSidecarAsset () const
  {
    return this->SidecarAsset_;
  }

  SidecarCompositionMapType_SidecarAssetListType::SidecarAssetSequence& SidecarCompositionMapType_SidecarAssetListType::
  getSidecarAsset ()
  {
    return this->SidecarAsset_;
  }

  void SidecarCompositionMapType_SidecarAssetListType::
  setSidecarAsset (const SidecarAssetSequence& s)
  {
    this->SidecarAsset_ = s;
  }


  // SidecarAssetType_AssociatedCPLListType
  // 

  const SidecarAssetType_AssociatedCPLListType::CPLIdSequence& SidecarAssetType_AssociatedCPLListType::
  getCPLId () const
  {
    return this->CPLId_;
  }

  SidecarAssetType_AssociatedCPLListType::CPLIdSequence& SidecarAssetType_AssociatedCPLListType::
  getCPLId ()
  {
    return this->CPLId_;
  }

  void SidecarAssetType_AssociatedCPLListType::
  setCPLId (const CPLIdSequence& s)
  {
    this->CPLId_ = s;
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace scm
{
  // SidecarCompositionMapType
  //

  SidecarCompositionMapType::
  SidecarCompositionMapType (const IdType& Id,
                             const PropertiesType& Properties,
                             const SidecarAssetListType& SidecarAssetList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    Properties_ (Properties, this),
    SidecarAssetList_ (SidecarAssetList, this),
    Signer_ (this),
    Signature_ (this)
  {
  }

  SidecarCompositionMapType::
  SidecarCompositionMapType (const IdType& Id,
                             ::std::unique_ptr< PropertiesType > Properties,
                             ::std::unique_ptr< SidecarAssetListType > SidecarAssetList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    Properties_ (std::move (Properties), this),
    SidecarAssetList_ (std::move (SidecarAssetList), this),
    Signer_ (this),
    Signature_ (this)
  {
  }

  SidecarCompositionMapType::
  SidecarCompositionMapType (const SidecarCompositionMapType& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Id_ (x.Id_, f, this),
    Properties_ (x.Properties_, f, this),
    SidecarAssetList_ (x.SidecarAssetList_, f, this),
    Signer_ (x.Signer_, f, this),
    Signature_ (x.Signature_, f, this)
  {
  }

  SidecarCompositionMapType::
  SidecarCompositionMapType (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Id_ (this),
    Properties_ (this),
    SidecarAssetList_ (this),
    Signer_ (this),
    Signature_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SidecarCompositionMapType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Id
      //
      if (n.name () == "Id" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< IdType > r (
          IdTraits::create (i, f, this));

        if (!Id_.present ())
        {
          this->Id_.set (::std::move (r));
          continue;
        }
      }

      // Properties
      //
      if (n.name () == "Properties" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< PropertiesType > r (
          PropertiesTraits::create (i, f, this));

        if (!Properties_.present ())
        {
          this->Properties_.set (::std::move (r));
          continue;
        }
      }

      // SidecarAssetList
      //
      if (n.name () == "SidecarAssetList" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< SidecarAssetListType > r (
          SidecarAssetListTraits::create (i, f, this));

        if (!SidecarAssetList_.present ())
        {
          this->SidecarAssetList_.set (::std::move (r));
          continue;
        }
      }

      // Signer
      //
      if (n.name () == "Signer" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< SignerType > r (
          SignerTraits::create (i, f, this));

        if (!this->Signer_)
        {
          this->Signer_.set (::std::move (r));
          continue;
        }
      }

      // Signature
      //
      if (n.name () == "Signature" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< SignatureType > r (
          SignatureTraits::create (i, f, this));

        if (!this->Signature_)
        {
          this->Signature_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Id",
        "http://www.smpte-ra.org/ns/2067-9/2018");
    }

    if (!Properties_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Properties",
        "http://www.smpte-ra.org/ns/2067-9/2018");
    }

    if (!SidecarAssetList_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SidecarAssetList",
        "http://www.smpte-ra.org/ns/2067-9/2018");
    }
  }

  SidecarCompositionMapType* SidecarCompositionMapType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SidecarCompositionMapType (*this, f, c);
  }

  SidecarCompositionMapType& SidecarCompositionMapType::
  operator= (const SidecarCompositionMapType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Id_ = x.Id_;
      this->Properties_ = x.Properties_;
      this->SidecarAssetList_ = x.SidecarAssetList_;
      this->Signer_ = x.Signer_;
      this->Signature_ = x.Signature_;
    }

    return *this;
  }

  SidecarCompositionMapType::
  ~SidecarCompositionMapType ()
  {
  }

  // SidecarAssetType
  //

  SidecarAssetType::
  SidecarAssetType (const IdType& Id,
                    const AssociatedCPLListType& AssociatedCPLList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AssociatedCPLList_ (AssociatedCPLList, this)
  {
  }

  SidecarAssetType::
  SidecarAssetType (const IdType& Id,
                    ::std::unique_ptr< AssociatedCPLListType > AssociatedCPLList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AssociatedCPLList_ (std::move (AssociatedCPLList), this)
  {
  }

  SidecarAssetType::
  SidecarAssetType (const SidecarAssetType& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Id_ (x.Id_, f, this),
    AssociatedCPLList_ (x.AssociatedCPLList_, f, this)
  {
  }

  SidecarAssetType::
  SidecarAssetType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Id_ (this),
    AssociatedCPLList_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SidecarAssetType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Id
      //
      if (n.name () == "Id" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< IdType > r (
          IdTraits::create (i, f, this));

        if (!Id_.present ())
        {
          this->Id_.set (::std::move (r));
          continue;
        }
      }

      // AssociatedCPLList
      //
      if (n.name () == "AssociatedCPLList" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< AssociatedCPLListType > r (
          AssociatedCPLListTraits::create (i, f, this));

        if (!AssociatedCPLList_.present ())
        {
          this->AssociatedCPLList_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Id",
        "http://www.smpte-ra.org/ns/2067-9/2018");
    }

    if (!AssociatedCPLList_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "AssociatedCPLList",
        "http://www.smpte-ra.org/ns/2067-9/2018");
    }
  }

  SidecarAssetType* SidecarAssetType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SidecarAssetType (*this, f, c);
  }

  SidecarAssetType& SidecarAssetType::
  operator= (const SidecarAssetType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Id_ = x.Id_;
      this->AssociatedCPLList_ = x.AssociatedCPLList_;
    }

    return *this;
  }

  SidecarAssetType::
  ~SidecarAssetType ()
  {
  }

  // SidecarCompositionMapType_PropertiesType
  //

  SidecarCompositionMapType_PropertiesType::
  SidecarCompositionMapType_PropertiesType (const IssueDateType& IssueDate)
  : ::xml_schema::Type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    Annotation_ (this),
    IssueDate_ (IssueDate, this),
    Issuer_ (this),
    any_ (this->getDomDocument ())
  {
  }

  SidecarCompositionMapType_PropertiesType::
  SidecarCompositionMapType_PropertiesType (const SidecarCompositionMapType_PropertiesType& x,
                                            ::xml_schema::Flags f,
                                            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    Annotation_ (x.Annotation_, f, this),
    IssueDate_ (x.IssueDate_, f, this),
    Issuer_ (x.Issuer_, f, this),
    any_ (x.any_, this->getDomDocument ())
  {
  }

  SidecarCompositionMapType_PropertiesType::
  SidecarCompositionMapType_PropertiesType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::Flags f,
                                            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    Annotation_ (this),
    IssueDate_ (this),
    Issuer_ (this),
    any_ (this->getDomDocument ())
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SidecarCompositionMapType_PropertiesType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Annotation
      //
      if (n.name () == "Annotation" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< AnnotationType > r (
          AnnotationTraits::create (i, f, this));

        if (!this->Annotation_)
        {
          this->Annotation_.set (::std::move (r));
          continue;
        }
      }

      // IssueDate
      //
      if (n.name () == "IssueDate" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< IssueDateType > r (
          IssueDateTraits::create (i, f, this));

        if (!IssueDate_.present ())
        {
          this->IssueDate_.set (::std::move (r));
          continue;
        }
      }

      // Issuer
      //
      if (n.name () == "Issuer" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< IssuerType > r (
          IssuerTraits::create (i, f, this));

        if (!this->Issuer_)
        {
          this->Issuer_.set (::std::move (r));
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://www.smpte-ra.org/ns/2067-9/2018"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any_.push_back (r);
        continue;
      }

      break;
    }

    if (!IssueDate_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IssueDate",
        "http://www.smpte-ra.org/ns/2067-9/2018");
    }
  }

  SidecarCompositionMapType_PropertiesType* SidecarCompositionMapType_PropertiesType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SidecarCompositionMapType_PropertiesType (*this, f, c);
  }

  SidecarCompositionMapType_PropertiesType& SidecarCompositionMapType_PropertiesType::
  operator= (const SidecarCompositionMapType_PropertiesType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Annotation_ = x.Annotation_;
      this->IssueDate_ = x.IssueDate_;
      this->Issuer_ = x.Issuer_;
      this->any_ = x.any_;
    }

    return *this;
  }

  SidecarCompositionMapType_PropertiesType::
  ~SidecarCompositionMapType_PropertiesType ()
  {
  }

  // SidecarCompositionMapType_SidecarAssetListType
  //

  SidecarCompositionMapType_SidecarAssetListType::
  SidecarCompositionMapType_SidecarAssetListType ()
  : ::xml_schema::Type (),
    SidecarAsset_ (this)
  {
  }

  SidecarCompositionMapType_SidecarAssetListType::
  SidecarCompositionMapType_SidecarAssetListType (const SidecarCompositionMapType_SidecarAssetListType& x,
                                                  ::xml_schema::Flags f,
                                                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    SidecarAsset_ (x.SidecarAsset_, f, this)
  {
  }

  SidecarCompositionMapType_SidecarAssetListType::
  SidecarCompositionMapType_SidecarAssetListType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::Flags f,
                                                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    SidecarAsset_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SidecarCompositionMapType_SidecarAssetListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SidecarAsset
      //
      if (n.name () == "SidecarAsset" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< SidecarAssetType > r (
          SidecarAssetTraits::create (i, f, this));

        this->SidecarAsset_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  SidecarCompositionMapType_SidecarAssetListType* SidecarCompositionMapType_SidecarAssetListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SidecarCompositionMapType_SidecarAssetListType (*this, f, c);
  }

  SidecarCompositionMapType_SidecarAssetListType& SidecarCompositionMapType_SidecarAssetListType::
  operator= (const SidecarCompositionMapType_SidecarAssetListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->SidecarAsset_ = x.SidecarAsset_;
    }

    return *this;
  }

  SidecarCompositionMapType_SidecarAssetListType::
  ~SidecarCompositionMapType_SidecarAssetListType ()
  {
  }

  // SidecarAssetType_AssociatedCPLListType
  //

  SidecarAssetType_AssociatedCPLListType::
  SidecarAssetType_AssociatedCPLListType ()
  : ::xml_schema::Type (),
    CPLId_ (this)
  {
  }

  SidecarAssetType_AssociatedCPLListType::
  SidecarAssetType_AssociatedCPLListType (const SidecarAssetType_AssociatedCPLListType& x,
                                          ::xml_schema::Flags f,
                                          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    CPLId_ (x.CPLId_, f, this)
  {
  }

  SidecarAssetType_AssociatedCPLListType::
  SidecarAssetType_AssociatedCPLListType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::Flags f,
                                          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    CPLId_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SidecarAssetType_AssociatedCPLListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CPLId
      //
      if (n.name () == "CPLId" && n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
      {
        ::std::unique_ptr< CPLIdType > r (
          CPLIdTraits::create (i, f, this));

        this->CPLId_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  SidecarAssetType_AssociatedCPLListType* SidecarAssetType_AssociatedCPLListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SidecarAssetType_AssociatedCPLListType (*this, f, c);
  }

  SidecarAssetType_AssociatedCPLListType& SidecarAssetType_AssociatedCPLListType::
  operator= (const SidecarAssetType_AssociatedCPLListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->CPLId_ = x.CPLId_;
    }

    return *this;
  }

  SidecarAssetType_AssociatedCPLListType::
  ~SidecarAssetType_AssociatedCPLListType ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace scm
{
  ::std::ostream&
  operator<< (::std::ostream& o, const SidecarCompositionMapType& i)
  {
    o << ::std::endl << "Id: " << i.getId ();
    o << ::std::endl << "Properties: " << i.getProperties ();
    o << ::std::endl << "SidecarAssetList: " << i.getSidecarAssetList ();
    if (i.getSigner ())
    {
      o << ::std::endl << "Signer: " << *i.getSigner ();
    }

    if (i.getSignature ())
    {
      o << ::std::endl << "Signature: " << *i.getSignature ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SidecarAssetType& i)
  {
    o << ::std::endl << "Id: " << i.getId ();
    o << ::std::endl << "AssociatedCPLList: " << i.getAssociatedCPLList ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SidecarCompositionMapType_PropertiesType& i)
  {
    if (i.getAnnotation ())
    {
      o << ::std::endl << "Annotation: " << *i.getAnnotation ();
    }

    o << ::std::endl << "IssueDate: " << i.getIssueDate ();
    if (i.getIssuer ())
    {
      o << ::std::endl << "Issuer: " << *i.getIssuer ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SidecarCompositionMapType_SidecarAssetListType& i)
  {
    for (SidecarCompositionMapType_SidecarAssetListType::SidecarAssetConstIterator
         b (i.getSidecarAsset ().begin ()), e (i.getSidecarAsset ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "SidecarAsset: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const SidecarAssetType_AssociatedCPLListType& i)
  {
    for (SidecarAssetType_AssociatedCPLListType::CPLIdConstIterator
         b (i.getCPLId ().begin ()), e (i.getCPLId ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "CPLId: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace scm
{
  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (const ::std::string& u,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::scm::SidecarCompositionMapType > (
      ::scm::parseSidecarCompositionMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (const ::std::string& u,
                              ::xml_schema::ErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::scm::SidecarCompositionMapType > (
      ::scm::parseSidecarCompositionMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::scm::SidecarCompositionMapType > (
      ::scm::parseSidecarCompositionMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::std::istream& is,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::scm::parseSidecarCompositionMap (isrc, f, p);
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::std::istream& is,
                              ::xml_schema::ErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::scm::parseSidecarCompositionMap (isrc, h, f, p);
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::scm::parseSidecarCompositionMap (isrc, h, f, p);
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::scm::parseSidecarCompositionMap (isrc, f, p);
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::ErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::scm::parseSidecarCompositionMap (isrc, h, f, p);
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::scm::parseSidecarCompositionMap (isrc, h, f, p);
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::xercesc::InputSource& i,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::scm::SidecarCompositionMapType > (
      ::scm::parseSidecarCompositionMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::xercesc::InputSource& i,
                              ::xml_schema::ErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::scm::SidecarCompositionMapType > (
      ::scm::parseSidecarCompositionMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::scm::SidecarCompositionMapType > (
      ::scm::parseSidecarCompositionMap (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::scm::SidecarCompositionMapType > (
        ::scm::parseSidecarCompositionMap (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SidecarCompositionMap" &&
        n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
    {
      ::std::unique_ptr< ::scm::SidecarCompositionMapType > r (
        ::xsd::cxx::tree::traits< ::scm::SidecarCompositionMapType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SidecarCompositionMap",
      "http://www.smpte-ra.org/ns/2067-9/2018");
  }

  ::std::unique_ptr< ::scm::SidecarCompositionMapType >
  parseSidecarCompositionMap (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SidecarCompositionMap" &&
        n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
    {
      ::std::unique_ptr< ::scm::SidecarCompositionMapType > r (
        ::xsd::cxx::tree::traits< ::scm::SidecarCompositionMapType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SidecarCompositionMap",
      "http://www.smpte-ra.org/ns/2067-9/2018");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace scm
{
  void
  serializeSidecarCompositionMap (::std::ostream& o,
                                  const ::scm::SidecarCompositionMapType& s,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::scm::serializeSidecarCompositionMap (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeSidecarCompositionMap (::std::ostream& o,
                                  const ::scm::SidecarCompositionMapType& s,
                                  ::xml_schema::ErrorHandler& h,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::scm::serializeSidecarCompositionMap (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeSidecarCompositionMap (::std::ostream& o,
                                  const ::scm::SidecarCompositionMapType& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::scm::serializeSidecarCompositionMap (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeSidecarCompositionMap (::xercesc::XMLFormatTarget& t,
                                  const ::scm::SidecarCompositionMapType& s,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::scm::serializeSidecarCompositionMap (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeSidecarCompositionMap (::xercesc::XMLFormatTarget& t,
                                  const ::scm::SidecarCompositionMapType& s,
                                  ::xml_schema::ErrorHandler& h,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::scm::serializeSidecarCompositionMap (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeSidecarCompositionMap (::xercesc::XMLFormatTarget& t,
                                  const ::scm::SidecarCompositionMapType& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::scm::serializeSidecarCompositionMap (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeSidecarCompositionMap (::xercesc::DOMDocument& d,
                                  const ::scm::SidecarCompositionMapType& s,
                                  ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SidecarCompositionMap" &&
        n.namespace_ () == "http://www.smpte-ra.org/ns/2067-9/2018")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SidecarCompositionMap",
        "http://www.smpte-ra.org/ns/2067-9/2018");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeSidecarCompositionMap (const ::scm::SidecarCompositionMapType& s,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SidecarCompositionMap",
        "http://www.smpte-ra.org/ns/2067-9/2018",
        m, f));

    ::scm::serializeSidecarCompositionMap (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const SidecarCompositionMapType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Id",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << i.getId ();
    }

    // Properties
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << i.getProperties ();
    }

    // SidecarAssetList
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SidecarAssetList",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << i.getSidecarAssetList ();
    }

    // Signer
    //
    if (i.getSigner ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Signer",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << *i.getSigner ();
    }

    // Signature
    //
    if (i.getSignature ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Signature",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << *i.getSignature ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SidecarAssetType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Id",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << i.getId ();
    }

    // AssociatedCPLList
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AssociatedCPLList",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << i.getAssociatedCPLList ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SidecarCompositionMapType_PropertiesType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Annotation
    //
    if (i.getAnnotation ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Annotation",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << *i.getAnnotation ();
    }

    // IssueDate
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IssueDate",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << i.getIssueDate ();
    }

    // Issuer
    //
    if (i.getIssuer ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Issuer",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << *i.getIssuer ();
    }

    // any
    //
    for (SidecarCompositionMapType_PropertiesType::AnyConstIterator
         b (i.getAny ().begin ()), n (i.getAny ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SidecarCompositionMapType_SidecarAssetListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // SidecarAsset
    //
    for (SidecarCompositionMapType_SidecarAssetListType::SidecarAssetConstIterator
         b (i.getSidecarAsset ().begin ()), n (i.getSidecarAsset ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SidecarAsset",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SidecarAssetType_AssociatedCPLListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // CPLId
    //
    for (SidecarAssetType_AssociatedCPLListType::CPLIdConstIterator
         b (i.getCPLId ().begin ()), n (i.getCPLId ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CPLId",
          "http://www.smpte-ra.org/ns/2067-9/2018",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

