// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "st2067-2a-2016-Core.h"

namespace cc2016
{
  // StereoImageTrackFileResourceType
  // 

  const StereoImageTrackFileResourceType::LeftEyeType& StereoImageTrackFileResourceType::
  getLeftEye () const
  {
    return this->LeftEye_.get ();
  }

  StereoImageTrackFileResourceType::LeftEyeType& StereoImageTrackFileResourceType::
  getLeftEye ()
  {
    return this->LeftEye_.get ();
  }

  void StereoImageTrackFileResourceType::
  setLeftEye (const LeftEyeType& x)
  {
    this->LeftEye_.set (x);
  }

  void StereoImageTrackFileResourceType::
  setLeftEye (::std::unique_ptr< LeftEyeType > x)
  {
    this->LeftEye_.set (std::move (x));
  }

  const StereoImageTrackFileResourceType::RightEyeType& StereoImageTrackFileResourceType::
  getRightEye () const
  {
    return this->RightEye_.get ();
  }

  StereoImageTrackFileResourceType::RightEyeType& StereoImageTrackFileResourceType::
  getRightEye ()
  {
    return this->RightEye_.get ();
  }

  void StereoImageTrackFileResourceType::
  setRightEye (const RightEyeType& x)
  {
    this->RightEye_.set (x);
  }

  void StereoImageTrackFileResourceType::
  setRightEye (::std::unique_ptr< RightEyeType > x)
  {
    this->RightEye_.set (std::move (x));
  }


  // ApplicationIdentification_base
  //

  ApplicationIdentification_base::
  ApplicationIdentification_base ()
  : ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (this)
  {
  }

  ApplicationIdentification_base::
  ApplicationIdentification_base (size_type n, const ::xml_schema::Uri& x)
  : ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (n, x, this)
  {
  }

  ApplicationIdentification_base::
  ApplicationIdentification_base (const ApplicationIdentification_base& o,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
  : ::xml_schema::SimpleType (o, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (o, f, this)
  {
  }

  // ApplicationIdentification
  // 


  // CDPSequence
  // 

  const CDPSequence::ParentTrackIDType& CDPSequence::
  getParentTrackID () const
  {
    return this->ParentTrackID_.get ();
  }

  CDPSequence::ParentTrackIDType& CDPSequence::
  getParentTrackID ()
  {
    return this->ParentTrackID_.get ();
  }

  void CDPSequence::
  setParentTrackID (const ParentTrackIDType& x)
  {
    this->ParentTrackID_.set (x);
  }

  void CDPSequence::
  setParentTrackID (::std::unique_ptr< ParentTrackIDType > x)
  {
    this->ParentTrackID_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace cc2016
{
  // StereoImageTrackFileResourceType
  //

  StereoImageTrackFileResourceType::
  StereoImageTrackFileResourceType (const IdType& Id,
                                    const IntrinsicDurationType& IntrinsicDuration,
                                    const LeftEyeType& LeftEye,
                                    const RightEyeType& RightEye)
  : ::cpl2016::BaseResourceType (Id,
                                 IntrinsicDuration),
    LeftEye_ (LeftEye, this),
    RightEye_ (RightEye, this)
  {
  }

  StereoImageTrackFileResourceType::
  StereoImageTrackFileResourceType (const IdType& Id,
                                    const IntrinsicDurationType& IntrinsicDuration,
                                    ::std::unique_ptr< LeftEyeType > LeftEye,
                                    ::std::unique_ptr< RightEyeType > RightEye)
  : ::cpl2016::BaseResourceType (Id,
                                 IntrinsicDuration),
    LeftEye_ (std::move (LeftEye), this),
    RightEye_ (std::move (RightEye), this)
  {
  }

  StereoImageTrackFileResourceType::
  StereoImageTrackFileResourceType (const StereoImageTrackFileResourceType& x,
                                    ::xml_schema::Flags f,
                                    ::xml_schema::Container* c)
  : ::cpl2016::BaseResourceType (x, f, c),
    LeftEye_ (x.LeftEye_, f, this),
    RightEye_ (x.RightEye_, f, this)
  {
  }

  StereoImageTrackFileResourceType::
  StereoImageTrackFileResourceType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f,
                                    ::xml_schema::Container* c)
  : ::cpl2016::BaseResourceType (e, f | ::xml_schema::Flags::base, c),
    LeftEye_ (this),
    RightEye_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void StereoImageTrackFileResourceType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::cpl2016::BaseResourceType::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // LeftEye
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "LeftEye",
            "http://www.smpte-ra.org/schemas/2067-2/2016",
            &::xsd::cxx::tree::factory_impl< LeftEyeType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!LeftEye_.present ())
          {
            ::std::unique_ptr< LeftEyeType > r (
              dynamic_cast< LeftEyeType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->LeftEye_.set (::std::move (r));
            continue;
          }
        }
      }

      // RightEye
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "RightEye",
            "http://www.smpte-ra.org/schemas/2067-2/2016",
            &::xsd::cxx::tree::factory_impl< RightEyeType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!RightEye_.present ())
          {
            ::std::unique_ptr< RightEyeType > r (
              dynamic_cast< RightEyeType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->RightEye_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!LeftEye_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "LeftEye",
        "http://www.smpte-ra.org/schemas/2067-2/2016");
    }

    if (!RightEye_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "RightEye",
        "http://www.smpte-ra.org/schemas/2067-2/2016");
    }
  }

  StereoImageTrackFileResourceType* StereoImageTrackFileResourceType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class StereoImageTrackFileResourceType (*this, f, c);
  }

  StereoImageTrackFileResourceType& StereoImageTrackFileResourceType::
  operator= (const StereoImageTrackFileResourceType& x)
  {
    if (this != &x)
    {
      static_cast< ::cpl2016::BaseResourceType& > (*this) = x;
      this->LeftEye_ = x.LeftEye_;
      this->RightEye_ = x.RightEye_;
    }

    return *this;
  }

  StereoImageTrackFileResourceType::
  ~StereoImageTrackFileResourceType ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, StereoImageTrackFileResourceType >
  _xsd_StereoImageTrackFileResourceType_type_factory_init (
    "StereoImageTrackFileResourceType",
    "http://www.smpte-ra.org/schemas/2067-2/2016");

  // ApplicationIdentification_base
  //

  ApplicationIdentification_base::
  ApplicationIdentification_base (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
  : ::xml_schema::SimpleType (e, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (e, f, this)
  {
  }

  ApplicationIdentification_base::
  ApplicationIdentification_base (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
  : ::xml_schema::SimpleType (a, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (a, f, this)
  {
  }

  ApplicationIdentification_base::
  ApplicationIdentification_base (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
  : ::xml_schema::SimpleType (s, e, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (s, e, f, this)
  {
  }

  ApplicationIdentification_base* ApplicationIdentification_base::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ApplicationIdentification_base (*this, f, c);
  }

  ApplicationIdentification_base::
  ~ApplicationIdentification_base ()
  {
  }

  // ApplicationIdentification
  //

  ApplicationIdentification::
  ApplicationIdentification ()
  : ::cc2016::ApplicationIdentification_base ()
  {
  }

  ApplicationIdentification::
  ApplicationIdentification (const ::cc2016::ApplicationIdentification_base& _xsd_ApplicationIdentification_base_base)
  : ::cc2016::ApplicationIdentification_base (_xsd_ApplicationIdentification_base_base)
  {
  }

  ApplicationIdentification::
  ApplicationIdentification (const ApplicationIdentification& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::cc2016::ApplicationIdentification_base (x, f, c)
  {
  }

  ApplicationIdentification::
  ApplicationIdentification (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::cc2016::ApplicationIdentification_base (e, f, c)
  {
  }

  ApplicationIdentification::
  ApplicationIdentification (const ::xercesc::DOMAttr& a,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::cc2016::ApplicationIdentification_base (a, f, c)
  {
  }

  ApplicationIdentification::
  ApplicationIdentification (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::cc2016::ApplicationIdentification_base (s, e, f, c)
  {
  }

  ApplicationIdentification* ApplicationIdentification::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ApplicationIdentification (*this, f, c);
  }

  ApplicationIdentification::
  ~ApplicationIdentification ()
  {
  }

  // CDPSequence
  //

  CDPSequence::
  CDPSequence (const IdType& Id,
               const TrackIdType& TrackId,
               const ResourceListType& ResourceList,
               const ParentTrackIDType& ParentTrackID)
  : ::cpl2016::SequenceType (Id,
                             TrackId,
                             ResourceList),
    ParentTrackID_ (ParentTrackID, this)
  {
  }

  CDPSequence::
  CDPSequence (const IdType& Id,
               const TrackIdType& TrackId,
               ::std::unique_ptr< ResourceListType > ResourceList,
               const ParentTrackIDType& ParentTrackID)
  : ::cpl2016::SequenceType (Id,
                             TrackId,
                             std::move (ResourceList)),
    ParentTrackID_ (ParentTrackID, this)
  {
  }

  CDPSequence::
  CDPSequence (const CDPSequence& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::cpl2016::SequenceType (x, f, c),
    ParentTrackID_ (x.ParentTrackID_, f, this)
  {
  }

  CDPSequence::
  CDPSequence (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::cpl2016::SequenceType (e, f | ::xml_schema::Flags::base, c),
    ParentTrackID_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void CDPSequence::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::cpl2016::SequenceType::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ParentTrackID
      //
      if (n.name () == "ParentTrackID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016")
      {
        ::std::unique_ptr< ParentTrackIDType > r (
          ParentTrackIDTraits::create (i, f, this));

        if (!ParentTrackID_.present ())
        {
          this->ParentTrackID_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!ParentTrackID_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ParentTrackID",
        "http://www.smpte-ra.org/schemas/2067-2/2016");
    }
  }

  CDPSequence* CDPSequence::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CDPSequence (*this, f, c);
  }

  CDPSequence& CDPSequence::
  operator= (const CDPSequence& x)
  {
    if (this != &x)
    {
      static_cast< ::cpl2016::SequenceType& > (*this) = x;
      this->ParentTrackID_ = x.ParentTrackID_;
    }

    return *this;
  }

  CDPSequence::
  ~CDPSequence ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace cc2016
{
  ::std::ostream&
  operator<< (::std::ostream& o, const StereoImageTrackFileResourceType& i)
  {
    o << static_cast< const ::cpl2016::BaseResourceType& > (i);

    {
      ::xsd::cxx::tree::std_ostream_map< char >& om (
        ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

      o << ::std::endl << "LeftEye: ";
      om.insert (o, i.getLeftEye ());
    }

    {
      ::xsd::cxx::tree::std_ostream_map< char >& om (
        ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

      o << ::std::endl << "RightEye: ";
      om.insert (o, i.getRightEye ());
    }

    return o;
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, StereoImageTrackFileResourceType >
  _xsd_StereoImageTrackFileResourceType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, const ApplicationIdentification_base& i)
  {
    return o << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::Uri, char >& > (i);
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ApplicationIdentification& i)
  {
    o << static_cast< const ::cc2016::ApplicationIdentification_base& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const CDPSequence& i)
  {
    o << static_cast< const ::cpl2016::SequenceType& > (i);

    o << ::std::endl << "ParentTrackID: " << i.getParentTrackID ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace cc2016
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace cc2016
{
  void
  operator<< (::xercesc::DOMElement& e, const StereoImageTrackFileResourceType& i)
  {
    e << static_cast< const ::cpl2016::BaseResourceType& > (i);

    // LeftEye
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const StereoImageTrackFileResourceType::LeftEyeType& x (i.getLeftEye ());
      if (typeid (StereoImageTrackFileResourceType::LeftEyeType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LeftEye",
            "http://www.smpte-ra.org/schemas/2067-2/2016",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "LeftEye",
          "http://www.smpte-ra.org/schemas/2067-2/2016",
          false, true, e, x);
    }

    // RightEye
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const StereoImageTrackFileResourceType::RightEyeType& x (i.getRightEye ());
      if (typeid (StereoImageTrackFileResourceType::RightEyeType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RightEye",
            "http://www.smpte-ra.org/schemas/2067-2/2016",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "RightEye",
          "http://www.smpte-ra.org/schemas/2067-2/2016",
          false, true, e, x);
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StereoImageTrackFileResourceType >
  _xsd_StereoImageTrackFileResourceType_type_serializer_init (
    "StereoImageTrackFileResourceType",
    "http://www.smpte-ra.org/schemas/2067-2/2016");


  void
  operator<< (::xercesc::DOMElement& e, const ApplicationIdentification_base& i)
  {
    e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::Uri, char >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ApplicationIdentification_base& i)
  {
    a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::Uri, char >& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const ApplicationIdentification_base& i)
  {
    l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::Uri, char >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const ApplicationIdentification& i)
  {
    e << static_cast< const ::cc2016::ApplicationIdentification_base& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ApplicationIdentification& i)
  {
    a << static_cast< const ::cc2016::ApplicationIdentification_base& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const ApplicationIdentification& i)
  {
    l << static_cast< const ::cc2016::ApplicationIdentification_base& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const CDPSequence& i)
  {
    e << static_cast< const ::cpl2016::SequenceType& > (i);

    // ParentTrackID
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ParentTrackID",
          "http://www.smpte-ra.org/schemas/2067-2/2016",
          e));

      s << i.getParentTrackID ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

