// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SMPTE-2067-100a-2014-OPL.h"

namespace opl
{
  // OutputProfileListType
  // 

  const OutputProfileListType::IdType& OutputProfileListType::
  getId () const
  {
    return this->Id_.get ();
  }

  OutputProfileListType::IdType& OutputProfileListType::
  getId ()
  {
    return this->Id_.get ();
  }

  void OutputProfileListType::
  setId (const IdType& x)
  {
    this->Id_.set (x);
  }

  void OutputProfileListType::
  setId (::std::unique_ptr< IdType > x)
  {
    this->Id_.set (std::move (x));
  }

  const OutputProfileListType::AnnotationOptional& OutputProfileListType::
  getAnnotation () const
  {
    return this->Annotation_;
  }

  OutputProfileListType::AnnotationOptional& OutputProfileListType::
  getAnnotation ()
  {
    return this->Annotation_;
  }

  void OutputProfileListType::
  setAnnotation (const AnnotationType& x)
  {
    this->Annotation_.set (x);
  }

  void OutputProfileListType::
  setAnnotation (const AnnotationOptional& x)
  {
    this->Annotation_ = x;
  }

  void OutputProfileListType::
  setAnnotation (::std::unique_ptr< AnnotationType > x)
  {
    this->Annotation_.set (std::move (x));
  }

  const OutputProfileListType::IssueDateType& OutputProfileListType::
  getIssueDate () const
  {
    return this->IssueDate_.get ();
  }

  OutputProfileListType::IssueDateType& OutputProfileListType::
  getIssueDate ()
  {
    return this->IssueDate_.get ();
  }

  void OutputProfileListType::
  setIssueDate (const IssueDateType& x)
  {
    this->IssueDate_.set (x);
  }

  void OutputProfileListType::
  setIssueDate (::std::unique_ptr< IssueDateType > x)
  {
    this->IssueDate_.set (std::move (x));
  }

  const OutputProfileListType::IssuerOptional& OutputProfileListType::
  getIssuer () const
  {
    return this->Issuer_;
  }

  OutputProfileListType::IssuerOptional& OutputProfileListType::
  getIssuer ()
  {
    return this->Issuer_;
  }

  void OutputProfileListType::
  setIssuer (const IssuerType& x)
  {
    this->Issuer_.set (x);
  }

  void OutputProfileListType::
  setIssuer (const IssuerOptional& x)
  {
    this->Issuer_ = x;
  }

  void OutputProfileListType::
  setIssuer (::std::unique_ptr< IssuerType > x)
  {
    this->Issuer_.set (std::move (x));
  }

  const OutputProfileListType::CreatorOptional& OutputProfileListType::
  getCreator () const
  {
    return this->Creator_;
  }

  OutputProfileListType::CreatorOptional& OutputProfileListType::
  getCreator ()
  {
    return this->Creator_;
  }

  void OutputProfileListType::
  setCreator (const CreatorType& x)
  {
    this->Creator_.set (x);
  }

  void OutputProfileListType::
  setCreator (const CreatorOptional& x)
  {
    this->Creator_ = x;
  }

  void OutputProfileListType::
  setCreator (::std::unique_ptr< CreatorType > x)
  {
    this->Creator_.set (std::move (x));
  }

  const OutputProfileListType::CompositionPlaylistIdType& OutputProfileListType::
  getCompositionPlaylistId () const
  {
    return this->CompositionPlaylistId_.get ();
  }

  OutputProfileListType::CompositionPlaylistIdType& OutputProfileListType::
  getCompositionPlaylistId ()
  {
    return this->CompositionPlaylistId_.get ();
  }

  void OutputProfileListType::
  setCompositionPlaylistId (const CompositionPlaylistIdType& x)
  {
    this->CompositionPlaylistId_.set (x);
  }

  void OutputProfileListType::
  setCompositionPlaylistId (::std::unique_ptr< CompositionPlaylistIdType > x)
  {
    this->CompositionPlaylistId_.set (std::move (x));
  }

  const OutputProfileListType::ExtensionPropertiesOptional& OutputProfileListType::
  getExtensionProperties () const
  {
    return this->ExtensionProperties_;
  }

  OutputProfileListType::ExtensionPropertiesOptional& OutputProfileListType::
  getExtensionProperties ()
  {
    return this->ExtensionProperties_;
  }

  void OutputProfileListType::
  setExtensionProperties (const ExtensionPropertiesType& x)
  {
    this->ExtensionProperties_.set (x);
  }

  void OutputProfileListType::
  setExtensionProperties (const ExtensionPropertiesOptional& x)
  {
    this->ExtensionProperties_ = x;
  }

  void OutputProfileListType::
  setExtensionProperties (::std::unique_ptr< ExtensionPropertiesType > x)
  {
    this->ExtensionProperties_.set (std::move (x));
  }

  const OutputProfileListType::AliasListType& OutputProfileListType::
  getAliasList () const
  {
    return this->AliasList_.get ();
  }

  OutputProfileListType::AliasListType& OutputProfileListType::
  getAliasList ()
  {
    return this->AliasList_.get ();
  }

  void OutputProfileListType::
  setAliasList (const AliasListType& x)
  {
    this->AliasList_.set (x);
  }

  void OutputProfileListType::
  setAliasList (::std::unique_ptr< AliasListType > x)
  {
    this->AliasList_.set (std::move (x));
  }

  const OutputProfileListType::MacroListType& OutputProfileListType::
  getMacroList () const
  {
    return this->MacroList_.get ();
  }

  OutputProfileListType::MacroListType& OutputProfileListType::
  getMacroList ()
  {
    return this->MacroList_.get ();
  }

  void OutputProfileListType::
  setMacroList (const MacroListType& x)
  {
    this->MacroList_.set (x);
  }

  void OutputProfileListType::
  setMacroList (::std::unique_ptr< MacroListType > x)
  {
    this->MacroList_.set (std::move (x));
  }

  const OutputProfileListType::SignerOptional& OutputProfileListType::
  getSigner () const
  {
    return this->Signer_;
  }

  OutputProfileListType::SignerOptional& OutputProfileListType::
  getSigner ()
  {
    return this->Signer_;
  }

  void OutputProfileListType::
  setSigner (const SignerType& x)
  {
    this->Signer_.set (x);
  }

  void OutputProfileListType::
  setSigner (const SignerOptional& x)
  {
    this->Signer_ = x;
  }

  void OutputProfileListType::
  setSigner (::std::unique_ptr< SignerType > x)
  {
    this->Signer_.set (std::move (x));
  }

  const OutputProfileListType::SignatureOptional& OutputProfileListType::
  getSignature () const
  {
    return this->Signature_;
  }

  OutputProfileListType::SignatureOptional& OutputProfileListType::
  getSignature ()
  {
    return this->Signature_;
  }

  void OutputProfileListType::
  setSignature (const SignatureType& x)
  {
    this->Signature_.set (x);
  }

  void OutputProfileListType::
  setSignature (const SignatureOptional& x)
  {
    this->Signature_ = x;
  }

  void OutputProfileListType::
  setSignature (::std::unique_ptr< SignatureType > x)
  {
    this->Signature_.set (std::move (x));
  }


  // MacroType
  // 

  const MacroType::NameType& MacroType::
  getName () const
  {
    return this->Name_.get ();
  }

  MacroType::NameType& MacroType::
  getName ()
  {
    return this->Name_.get ();
  }

  void MacroType::
  setName (const NameType& x)
  {
    this->Name_.set (x);
  }

  void MacroType::
  setName (::std::unique_ptr< NameType > x)
  {
    this->Name_.set (std::move (x));
  }

  const MacroType::AnnotationOptional& MacroType::
  getAnnotation () const
  {
    return this->Annotation_;
  }

  MacroType::AnnotationOptional& MacroType::
  getAnnotation ()
  {
    return this->Annotation_;
  }

  void MacroType::
  setAnnotation (const AnnotationType& x)
  {
    this->Annotation_.set (x);
  }

  void MacroType::
  setAnnotation (const AnnotationOptional& x)
  {
    this->Annotation_ = x;
  }

  void MacroType::
  setAnnotation (::std::unique_ptr< AnnotationType > x)
  {
    this->Annotation_.set (std::move (x));
  }


  // PresetMacroType
  // 

  const PresetMacroType::PresetType& PresetMacroType::
  getPreset () const
  {
    return this->Preset_.get ();
  }

  PresetMacroType::PresetType& PresetMacroType::
  getPreset ()
  {
    return this->Preset_.get ();
  }

  void PresetMacroType::
  setPreset (const PresetType& x)
  {
    this->Preset_.set (x);
  }

  void PresetMacroType::
  setPreset (::std::unique_ptr< PresetType > x)
  {
    this->Preset_.set (std::move (x));
  }


  // MacroNameType
  // 


  // HandleType
  // 


  // OutputProfileListType_ExtensionPropertiesType
  // 

  const OutputProfileListType_ExtensionPropertiesType::AnySequence& OutputProfileListType_ExtensionPropertiesType::
  getAny () const
  {
    return this->any_;
  }

  OutputProfileListType_ExtensionPropertiesType::AnySequence& OutputProfileListType_ExtensionPropertiesType::
  getAny ()
  {
    return this->any_;
  }

  void OutputProfileListType_ExtensionPropertiesType::
  setAny (const AnySequence& s)
  {
    this->any_ = s;
  }

  const ::xercesc::DOMDocument& OutputProfileListType_ExtensionPropertiesType::
  getDomDocument () const
  {
    return *this->dom_document_;
  }

  ::xercesc::DOMDocument& OutputProfileListType_ExtensionPropertiesType::
  getDomDocument ()
  {
    return *this->dom_document_;
  }


  // OutputProfileListType_AliasListType
  // 

  const OutputProfileListType_AliasListType::AliasSequence& OutputProfileListType_AliasListType::
  getAlias () const
  {
    return this->Alias_;
  }

  OutputProfileListType_AliasListType::AliasSequence& OutputProfileListType_AliasListType::
  getAlias ()
  {
    return this->Alias_;
  }

  void OutputProfileListType_AliasListType::
  setAlias (const AliasSequence& s)
  {
    this->Alias_ = s;
  }


  // OutputProfileListType_MacroListType
  // 

  const OutputProfileListType_MacroListType::MacroSequence& OutputProfileListType_MacroListType::
  getMacro () const
  {
    return this->Macro_;
  }

  OutputProfileListType_MacroListType::MacroSequence& OutputProfileListType_MacroListType::
  getMacro ()
  {
    return this->Macro_;
  }

  void OutputProfileListType_MacroListType::
  setMacro (const MacroSequence& s)
  {
    this->Macro_ = s;
  }


  // OutputProfileListType_AliasListType_AliasType
  // 

  const OutputProfileListType_AliasListType_AliasType::HandleType1& OutputProfileListType_AliasListType_AliasType::
  getHandle () const
  {
    return this->handle_.get ();
  }

  OutputProfileListType_AliasListType_AliasType::HandleType1& OutputProfileListType_AliasListType_AliasType::
  getHandle ()
  {
    return this->handle_.get ();
  }

  void OutputProfileListType_AliasListType_AliasType::
  setHandle (const HandleType1& x)
  {
    this->handle_.set (x);
  }

  void OutputProfileListType_AliasListType_AliasType::
  setHandle (::std::unique_ptr< HandleType1 > x)
  {
    this->handle_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace opl
{
  // OutputProfileListType
  //

  OutputProfileListType::
  OutputProfileListType (const IdType& Id,
                         const IssueDateType& IssueDate,
                         const CompositionPlaylistIdType& CompositionPlaylistId,
                         const AliasListType& AliasList,
                         const MacroListType& MacroList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    Annotation_ (this),
    IssueDate_ (IssueDate, this),
    Issuer_ (this),
    Creator_ (this),
    CompositionPlaylistId_ (CompositionPlaylistId, this),
    ExtensionProperties_ (this),
    AliasList_ (AliasList, this),
    MacroList_ (MacroList, this),
    Signer_ (this),
    Signature_ (this)
  {
  }

  OutputProfileListType::
  OutputProfileListType (const IdType& Id,
                         const IssueDateType& IssueDate,
                         const CompositionPlaylistIdType& CompositionPlaylistId,
                         ::std::unique_ptr< AliasListType > AliasList,
                         ::std::unique_ptr< MacroListType > MacroList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    Annotation_ (this),
    IssueDate_ (IssueDate, this),
    Issuer_ (this),
    Creator_ (this),
    CompositionPlaylistId_ (CompositionPlaylistId, this),
    ExtensionProperties_ (this),
    AliasList_ (std::move (AliasList), this),
    MacroList_ (std::move (MacroList), this),
    Signer_ (this),
    Signature_ (this)
  {
  }

  OutputProfileListType::
  OutputProfileListType (const OutputProfileListType& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Id_ (x.Id_, f, this),
    Annotation_ (x.Annotation_, f, this),
    IssueDate_ (x.IssueDate_, f, this),
    Issuer_ (x.Issuer_, f, this),
    Creator_ (x.Creator_, f, this),
    CompositionPlaylistId_ (x.CompositionPlaylistId_, f, this),
    ExtensionProperties_ (x.ExtensionProperties_, f, this),
    AliasList_ (x.AliasList_, f, this),
    MacroList_ (x.MacroList_, f, this),
    Signer_ (x.Signer_, f, this),
    Signature_ (x.Signature_, f, this)
  {
  }

  OutputProfileListType::
  OutputProfileListType (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Id_ (this),
    Annotation_ (this),
    IssueDate_ (this),
    Issuer_ (this),
    Creator_ (this),
    CompositionPlaylistId_ (this),
    ExtensionProperties_ (this),
    AliasList_ (this),
    MacroList_ (this),
    Signer_ (this),
    Signature_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void OutputProfileListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Id
      //
      if (n.name () == "Id" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< IdType > r (
          IdTraits::create (i, f, this));

        if (!Id_.present ())
        {
          this->Id_.set (::std::move (r));
          continue;
        }
      }

      // Annotation
      //
      if (n.name () == "Annotation" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< AnnotationType > r (
          AnnotationTraits::create (i, f, this));

        if (!this->Annotation_)
        {
          this->Annotation_.set (::std::move (r));
          continue;
        }
      }

      // IssueDate
      //
      if (n.name () == "IssueDate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< IssueDateType > r (
          IssueDateTraits::create (i, f, this));

        if (!IssueDate_.present ())
        {
          this->IssueDate_.set (::std::move (r));
          continue;
        }
      }

      // Issuer
      //
      if (n.name () == "Issuer" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< IssuerType > r (
          IssuerTraits::create (i, f, this));

        if (!this->Issuer_)
        {
          this->Issuer_.set (::std::move (r));
          continue;
        }
      }

      // Creator
      //
      if (n.name () == "Creator" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< CreatorType > r (
          CreatorTraits::create (i, f, this));

        if (!this->Creator_)
        {
          this->Creator_.set (::std::move (r));
          continue;
        }
      }

      // CompositionPlaylistId
      //
      if (n.name () == "CompositionPlaylistId" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< CompositionPlaylistIdType > r (
          CompositionPlaylistIdTraits::create (i, f, this));

        if (!CompositionPlaylistId_.present ())
        {
          this->CompositionPlaylistId_.set (::std::move (r));
          continue;
        }
      }

      // ExtensionProperties
      //
      if (n.name () == "ExtensionProperties" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< ExtensionPropertiesType > r (
          ExtensionPropertiesTraits::create (i, f, this));

        if (!this->ExtensionProperties_)
        {
          this->ExtensionProperties_.set (::std::move (r));
          continue;
        }
      }

      // AliasList
      //
      if (n.name () == "AliasList" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< AliasListType > r (
          AliasListTraits::create (i, f, this));

        if (!AliasList_.present ())
        {
          this->AliasList_.set (::std::move (r));
          continue;
        }
      }

      // MacroList
      //
      if (n.name () == "MacroList" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< MacroListType > r (
          MacroListTraits::create (i, f, this));

        if (!MacroList_.present ())
        {
          this->MacroList_.set (::std::move (r));
          continue;
        }
      }

      // Signer
      //
      if (n.name () == "Signer" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< SignerType > r (
          SignerTraits::create (i, f, this));

        if (!this->Signer_)
        {
          this->Signer_.set (::std::move (r));
          continue;
        }
      }

      // Signature
      //
      if (n.name () == "Signature" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::unique_ptr< SignatureType > r (
          SignatureTraits::create (i, f, this));

        if (!this->Signature_)
        {
          this->Signature_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Id",
        "http://www.smpte-ra.org/schemas/2067-100/2014");
    }

    if (!IssueDate_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IssueDate",
        "http://www.smpte-ra.org/schemas/2067-100/2014");
    }

    if (!CompositionPlaylistId_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "CompositionPlaylistId",
        "http://www.smpte-ra.org/schemas/2067-100/2014");
    }

    if (!AliasList_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "AliasList",
        "http://www.smpte-ra.org/schemas/2067-100/2014");
    }

    if (!MacroList_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "MacroList",
        "http://www.smpte-ra.org/schemas/2067-100/2014");
    }
  }

  OutputProfileListType* OutputProfileListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OutputProfileListType (*this, f, c);
  }

  OutputProfileListType& OutputProfileListType::
  operator= (const OutputProfileListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Id_ = x.Id_;
      this->Annotation_ = x.Annotation_;
      this->IssueDate_ = x.IssueDate_;
      this->Issuer_ = x.Issuer_;
      this->Creator_ = x.Creator_;
      this->CompositionPlaylistId_ = x.CompositionPlaylistId_;
      this->ExtensionProperties_ = x.ExtensionProperties_;
      this->AliasList_ = x.AliasList_;
      this->MacroList_ = x.MacroList_;
      this->Signer_ = x.Signer_;
      this->Signature_ = x.Signature_;
    }

    return *this;
  }

  OutputProfileListType::
  ~OutputProfileListType ()
  {
  }

  // MacroType
  //

  MacroType::
  MacroType (const NameType& Name)
  : ::xml_schema::Type (),
    Name_ (Name, this),
    Annotation_ (this)
  {
  }

  MacroType::
  MacroType (const MacroType& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Name_ (x.Name_, f, this),
    Annotation_ (x.Annotation_, f, this)
  {
  }

  MacroType::
  MacroType (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Name_ (this),
    Annotation_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void MacroType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Name
      //
      if (n.name () == "Name" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< NameType > r (
          NameTraits::create (i, f, this));

        if (!Name_.present ())
        {
          this->Name_.set (::std::move (r));
          continue;
        }
      }

      // Annotation
      //
      if (n.name () == "Annotation" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< AnnotationType > r (
          AnnotationTraits::create (i, f, this));

        if (!this->Annotation_)
        {
          this->Annotation_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Name",
        "http://www.smpte-ra.org/schemas/2067-100/2014");
    }
  }

  MacroType* MacroType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MacroType (*this, f, c);
  }

  MacroType& MacroType::
  operator= (const MacroType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Name_ = x.Name_;
      this->Annotation_ = x.Annotation_;
    }

    return *this;
  }

  MacroType::
  ~MacroType ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MacroType >
  _xsd_MacroType_type_factory_init (
    "MacroType",
    "http://www.smpte-ra.org/schemas/2067-100/2014");

  // PresetMacroType
  //

  PresetMacroType::
  PresetMacroType (const NameType& Name,
                   const PresetType& Preset)
  : ::opl::MacroType (Name),
    Preset_ (Preset, this)
  {
  }

  PresetMacroType::
  PresetMacroType (const PresetMacroType& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::opl::MacroType (x, f, c),
    Preset_ (x.Preset_, f, this)
  {
  }

  PresetMacroType::
  PresetMacroType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::opl::MacroType (e, f | ::xml_schema::Flags::base, c),
    Preset_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void PresetMacroType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::opl::MacroType::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Preset
      //
      if (n.name () == "Preset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< PresetType > r (
          PresetTraits::create (i, f, this));

        if (!Preset_.present ())
        {
          this->Preset_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Preset_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Preset",
        "http://www.smpte-ra.org/schemas/2067-100/2014");
    }
  }

  PresetMacroType* PresetMacroType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class PresetMacroType (*this, f, c);
  }

  PresetMacroType& PresetMacroType::
  operator= (const PresetMacroType& x)
  {
    if (this != &x)
    {
      static_cast< ::opl::MacroType& > (*this) = x;
      this->Preset_ = x.Preset_;
    }

    return *this;
  }

  PresetMacroType::
  ~PresetMacroType ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PresetMacroType >
  _xsd_PresetMacroType_type_factory_init (
    "PresetMacroType",
    "http://www.smpte-ra.org/schemas/2067-100/2014");

  // MacroNameType
  //

  MacroNameType::
  MacroNameType ()
  : ::xml_schema::String ()
  {
  }

  MacroNameType::
  MacroNameType (const char* _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base)
  {
  }

  MacroNameType::
  MacroNameType (const ::std::string& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base)
  {
  }

  MacroNameType::
  MacroNameType (const ::xml_schema::String& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base)
  {
  }

  MacroNameType::
  MacroNameType (const MacroNameType& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::String (x, f, c)
  {
  }

  MacroNameType::
  MacroNameType (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
  }

  MacroNameType::
  MacroNameType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
  }

  MacroNameType::
  MacroNameType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
  }

  MacroNameType* MacroNameType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MacroNameType (*this, f, c);
  }

  MacroNameType::
  ~MacroNameType ()
  {
  }

  // HandleType
  //

  HandleType::
  HandleType (const ::xml_schema::Uri& _xsd_Uri_base)
  : ::xml_schema::Uri (_xsd_Uri_base)
  {
  }

  HandleType::
  HandleType (const HandleType& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Uri (x, f, c)
  {
  }

  HandleType::
  HandleType (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Uri (e, f, c)
  {
  }

  HandleType::
  HandleType (const ::xercesc::DOMAttr& a,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Uri (a, f, c)
  {
  }

  HandleType::
  HandleType (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Uri (s, e, f, c)
  {
  }

  HandleType* HandleType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class HandleType (*this, f, c);
  }

  HandleType::
  ~HandleType ()
  {
  }

  // OutputProfileListType_ExtensionPropertiesType
  //

  OutputProfileListType_ExtensionPropertiesType::
  OutputProfileListType_ExtensionPropertiesType ()
  : ::xml_schema::Type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    any_ (this->getDomDocument ())
  {
  }

  OutputProfileListType_ExtensionPropertiesType::
  OutputProfileListType_ExtensionPropertiesType (const OutputProfileListType_ExtensionPropertiesType& x,
                                                 ::xml_schema::Flags f,
                                                 ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    any_ (x.any_, this->getDomDocument ())
  {
  }

  OutputProfileListType_ExtensionPropertiesType::
  OutputProfileListType_ExtensionPropertiesType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::Flags f,
                                                 ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    any_ (this->getDomDocument ())
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void OutputProfileListType_ExtensionPropertiesType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://www.smpte-ra.org/schemas/2067-100/2014"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any_.push_back (r);
        continue;
      }

      break;
    }
  }

  OutputProfileListType_ExtensionPropertiesType* OutputProfileListType_ExtensionPropertiesType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OutputProfileListType_ExtensionPropertiesType (*this, f, c);
  }

  OutputProfileListType_ExtensionPropertiesType& OutputProfileListType_ExtensionPropertiesType::
  operator= (const OutputProfileListType_ExtensionPropertiesType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->any_ = x.any_;
    }

    return *this;
  }

  OutputProfileListType_ExtensionPropertiesType::
  ~OutputProfileListType_ExtensionPropertiesType ()
  {
  }

  // OutputProfileListType_AliasListType
  //

  OutputProfileListType_AliasListType::
  OutputProfileListType_AliasListType ()
  : ::xml_schema::Type (),
    Alias_ (this)
  {
  }

  OutputProfileListType_AliasListType::
  OutputProfileListType_AliasListType (const OutputProfileListType_AliasListType& x,
                                       ::xml_schema::Flags f,
                                       ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Alias_ (x.Alias_, f, this)
  {
  }

  OutputProfileListType_AliasListType::
  OutputProfileListType_AliasListType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::Flags f,
                                       ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Alias_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void OutputProfileListType_AliasListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Alias
      //
      if (n.name () == "Alias" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
      {
        ::std::unique_ptr< AliasType > r (
          AliasTraits::create (i, f, this));

        this->Alias_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  OutputProfileListType_AliasListType* OutputProfileListType_AliasListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OutputProfileListType_AliasListType (*this, f, c);
  }

  OutputProfileListType_AliasListType& OutputProfileListType_AliasListType::
  operator= (const OutputProfileListType_AliasListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Alias_ = x.Alias_;
    }

    return *this;
  }

  OutputProfileListType_AliasListType::
  ~OutputProfileListType_AliasListType ()
  {
  }

  // OutputProfileListType_MacroListType
  //

  OutputProfileListType_MacroListType::
  OutputProfileListType_MacroListType ()
  : ::xml_schema::Type (),
    Macro_ (this)
  {
  }

  OutputProfileListType_MacroListType::
  OutputProfileListType_MacroListType (const OutputProfileListType_MacroListType& x,
                                       ::xml_schema::Flags f,
                                       ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Macro_ (x.Macro_, f, this)
  {
  }

  OutputProfileListType_MacroListType::
  OutputProfileListType_MacroListType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::Flags f,
                                       ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Macro_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void OutputProfileListType_MacroListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Macro
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Macro",
            "http://www.smpte-ra.org/schemas/2067-100/2014",
            &::xsd::cxx::tree::factory_impl< MacroType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< MacroType > r (
            dynamic_cast< MacroType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Macro_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  OutputProfileListType_MacroListType* OutputProfileListType_MacroListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OutputProfileListType_MacroListType (*this, f, c);
  }

  OutputProfileListType_MacroListType& OutputProfileListType_MacroListType::
  operator= (const OutputProfileListType_MacroListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Macro_ = x.Macro_;
    }

    return *this;
  }

  OutputProfileListType_MacroListType::
  ~OutputProfileListType_MacroListType ()
  {
  }

  // OutputProfileListType_AliasListType_AliasType
  //

  OutputProfileListType_AliasListType_AliasType::
  OutputProfileListType_AliasListType_AliasType (const ::xml_schema::Uri& _xsd_Uri_base,
                                                 const HandleType1& handle)
  : ::opl::HandleType (_xsd_Uri_base),
    handle_ (handle, this)
  {
  }

  OutputProfileListType_AliasListType_AliasType::
  OutputProfileListType_AliasListType_AliasType (const OutputProfileListType_AliasListType_AliasType& x,
                                                 ::xml_schema::Flags f,
                                                 ::xml_schema::Container* c)
  : ::opl::HandleType (x, f, c),
    handle_ (x.handle_, f, this)
  {
  }

  OutputProfileListType_AliasListType_AliasType::
  OutputProfileListType_AliasListType_AliasType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::Flags f,
                                                 ::xml_schema::Container* c)
  : ::opl::HandleType (e, f | ::xml_schema::Flags::base, c),
    handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void OutputProfileListType_AliasListType_AliasType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "handle" && n.namespace_ ().empty ())
      {
        this->handle_.set (HandleTraits::create (i, f, this));
        continue;
      }
    }

    if (!handle_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "handle",
        "");
    }
  }

  OutputProfileListType_AliasListType_AliasType* OutputProfileListType_AliasListType_AliasType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OutputProfileListType_AliasListType_AliasType (*this, f, c);
  }

  OutputProfileListType_AliasListType_AliasType& OutputProfileListType_AliasListType_AliasType::
  operator= (const OutputProfileListType_AliasListType_AliasType& x)
  {
    if (this != &x)
    {
      static_cast< ::opl::HandleType& > (*this) = x;
      this->handle_ = x.handle_;
    }

    return *this;
  }

  OutputProfileListType_AliasListType_AliasType::
  ~OutputProfileListType_AliasListType_AliasType ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace opl
{
  ::std::ostream&
  operator<< (::std::ostream& o, const OutputProfileListType& i)
  {
    o << ::std::endl << "Id: " << i.getId ();
    if (i.getAnnotation ())
    {
      o << ::std::endl << "Annotation: " << *i.getAnnotation ();
    }

    o << ::std::endl << "IssueDate: " << i.getIssueDate ();
    if (i.getIssuer ())
    {
      o << ::std::endl << "Issuer: " << *i.getIssuer ();
    }

    if (i.getCreator ())
    {
      o << ::std::endl << "Creator: " << *i.getCreator ();
    }

    o << ::std::endl << "CompositionPlaylistId: " << i.getCompositionPlaylistId ();
    if (i.getExtensionProperties ())
    {
      o << ::std::endl << "ExtensionProperties: " << *i.getExtensionProperties ();
    }

    o << ::std::endl << "AliasList: " << i.getAliasList ();
    o << ::std::endl << "MacroList: " << i.getMacroList ();
    if (i.getSigner ())
    {
      o << ::std::endl << "Signer: " << *i.getSigner ();
    }

    if (i.getSignature ())
    {
      o << ::std::endl << "Signature: " << *i.getSignature ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const MacroType& i)
  {
    o << ::std::endl << "Name: " << i.getName ();
    if (i.getAnnotation ())
    {
      o << ::std::endl << "Annotation: " << *i.getAnnotation ();
    }

    return o;
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MacroType >
  _xsd_MacroType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, const PresetMacroType& i)
  {
    o << static_cast< const ::opl::MacroType& > (i);

    o << ::std::endl << "Preset: " << i.getPreset ();
    return o;
  }

  static
  const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PresetMacroType >
  _xsd_PresetMacroType_std_ostream_init;

  ::std::ostream&
  operator<< (::std::ostream& o, const MacroNameType& i)
  {
    o << static_cast< const ::xml_schema::String& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const HandleType& i)
  {
    o << static_cast< const ::xml_schema::Uri& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OutputProfileListType_ExtensionPropertiesType&)
  {
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OutputProfileListType_AliasListType& i)
  {
    for (OutputProfileListType_AliasListType::AliasConstIterator
         b (i.getAlias ().begin ()), e (i.getAlias ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Alias: " << *b;
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OutputProfileListType_MacroListType& i)
  {
    {
      ::xsd::cxx::tree::std_ostream_map< char >& om (
        ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

      for (OutputProfileListType_MacroListType::MacroConstIterator
           b (i.getMacro ().begin ()), e (i.getMacro ().end ());
           b != e; ++b)
      {
        o << ::std::endl << "Macro: ";
        om.insert (o, *b);
      }
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const OutputProfileListType_AliasListType_AliasType& i)
  {
    o << static_cast< const ::opl::HandleType& > (i);

    o << ::std::endl << "handle: " << i.getHandle ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace opl
{
  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (const ::std::string& u,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::opl::OutputProfileListType > (
      ::opl::parseOutputProfileList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (const ::std::string& u,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::opl::OutputProfileListType > (
      ::opl::parseOutputProfileList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::opl::OutputProfileListType > (
      ::opl::parseOutputProfileList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::std::istream& is,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::opl::parseOutputProfileList (isrc, f, p);
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::std::istream& is,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::opl::parseOutputProfileList (isrc, h, f, p);
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::opl::parseOutputProfileList (isrc, h, f, p);
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::opl::parseOutputProfileList (isrc, f, p);
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::opl::parseOutputProfileList (isrc, h, f, p);
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::opl::parseOutputProfileList (isrc, h, f, p);
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::xercesc::InputSource& i,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::opl::OutputProfileListType > (
      ::opl::parseOutputProfileList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::xercesc::InputSource& i,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::opl::OutputProfileListType > (
      ::opl::parseOutputProfileList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::opl::OutputProfileListType > (
      ::opl::parseOutputProfileList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::opl::OutputProfileListType > (
        ::opl::parseOutputProfileList (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OutputProfileList" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
    {
      ::std::unique_ptr< ::opl::OutputProfileListType > r (
        ::xsd::cxx::tree::traits< ::opl::OutputProfileListType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OutputProfileList",
      "http://www.smpte-ra.org/schemas/2067-100/2014");
  }

  ::std::unique_ptr< ::opl::OutputProfileListType >
  parseOutputProfileList (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OutputProfileList" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
    {
      ::std::unique_ptr< ::opl::OutputProfileListType > r (
        ::xsd::cxx::tree::traits< ::opl::OutputProfileListType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OutputProfileList",
      "http://www.smpte-ra.org/schemas/2067-100/2014");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace opl
{
  void
  serializeOutputProfileList (::std::ostream& o,
                              const ::opl::OutputProfileListType& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::opl::serializeOutputProfileList (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeOutputProfileList (::std::ostream& o,
                              const ::opl::OutputProfileListType& s,
                              ::xml_schema::ErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::opl::serializeOutputProfileList (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeOutputProfileList (::std::ostream& o,
                              const ::opl::OutputProfileListType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::opl::serializeOutputProfileList (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeOutputProfileList (::xercesc::XMLFormatTarget& t,
                              const ::opl::OutputProfileListType& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::opl::serializeOutputProfileList (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeOutputProfileList (::xercesc::XMLFormatTarget& t,
                              const ::opl::OutputProfileListType& s,
                              ::xml_schema::ErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::opl::serializeOutputProfileList (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeOutputProfileList (::xercesc::XMLFormatTarget& t,
                              const ::opl::OutputProfileListType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::opl::serializeOutputProfileList (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeOutputProfileList (::xercesc::DOMDocument& d,
                              const ::opl::OutputProfileListType& s,
                              ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OutputProfileList" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-100/2014")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OutputProfileList",
        "http://www.smpte-ra.org/schemas/2067-100/2014");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeOutputProfileList (const ::opl::OutputProfileListType& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "OutputProfileList",
        "http://www.smpte-ra.org/schemas/2067-100/2014",
        m, f));

    ::opl::serializeOutputProfileList (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const OutputProfileListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Id",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << i.getId ();
    }

    // Annotation
    //
    if (i.getAnnotation ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Annotation",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << *i.getAnnotation ();
    }

    // IssueDate
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IssueDate",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << i.getIssueDate ();
    }

    // Issuer
    //
    if (i.getIssuer ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Issuer",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << *i.getIssuer ();
    }

    // Creator
    //
    if (i.getCreator ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Creator",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << *i.getCreator ();
    }

    // CompositionPlaylistId
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CompositionPlaylistId",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << i.getCompositionPlaylistId ();
    }

    // ExtensionProperties
    //
    if (i.getExtensionProperties ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ExtensionProperties",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << *i.getExtensionProperties ();
    }

    // AliasList
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AliasList",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << i.getAliasList ();
    }

    // MacroList
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MacroList",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << i.getMacroList ();
    }

    // Signer
    //
    if (i.getSigner ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Signer",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << *i.getSigner ();
    }

    // Signature
    //
    if (i.getSignature ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Signature",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.getSignature ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const MacroType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Name",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << i.getName ();
    }

    // Annotation
    //
    if (i.getAnnotation ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Annotation",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << *i.getAnnotation ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MacroType >
  _xsd_MacroType_type_serializer_init (
    "MacroType",
    "http://www.smpte-ra.org/schemas/2067-100/2014");


  void
  operator<< (::xercesc::DOMElement& e, const PresetMacroType& i)
  {
    e << static_cast< const ::opl::MacroType& > (i);

    // Preset
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Preset",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << i.getPreset ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PresetMacroType >
  _xsd_PresetMacroType_type_serializer_init (
    "PresetMacroType",
    "http://www.smpte-ra.org/schemas/2067-100/2014");


  void
  operator<< (::xercesc::DOMElement& e, const MacroNameType& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MacroNameType& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const MacroNameType& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const HandleType& i)
  {
    e << static_cast< const ::xml_schema::Uri& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const HandleType& i)
  {
    a << static_cast< const ::xml_schema::Uri& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const HandleType& i)
  {
    l << static_cast< const ::xml_schema::Uri& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const OutputProfileListType_ExtensionPropertiesType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // any
    //
    for (OutputProfileListType_ExtensionPropertiesType::AnyConstIterator
         b (i.getAny ().begin ()), n (i.getAny ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OutputProfileListType_AliasListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Alias
    //
    for (OutputProfileListType_AliasListType::AliasConstIterator
         b (i.getAlias ().begin ()), n (i.getAlias ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Alias",
          "http://www.smpte-ra.org/schemas/2067-100/2014",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OutputProfileListType_MacroListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Macro
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (OutputProfileListType_MacroListType::MacroConstIterator
           b (i.getMacro ().begin ()), n (i.getMacro ().end ());
           b != n; ++b)
      {
        if (typeid (OutputProfileListType_MacroListType::MacroType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Macro",
              "http://www.smpte-ra.org/schemas/2067-100/2014",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Macro",
            "http://www.smpte-ra.org/schemas/2067-100/2014",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OutputProfileListType_AliasListType_AliasType& i)
  {
    e << static_cast< const ::opl::HandleType& > (i);

    // handle
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "handle",
          e));

      a << i.getHandle ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

