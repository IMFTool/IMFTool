// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "st2067-2b-2020-PKL.h"

namespace pkl2016
{
  // PackingListType
  // 

  const PackingListType::IdType& PackingListType::
  getId () const
  {
    return this->Id_.get ();
  }

  PackingListType::IdType& PackingListType::
  getId ()
  {
    return this->Id_.get ();
  }

  void PackingListType::
  setId (const IdType& x)
  {
    this->Id_.set (x);
  }

  void PackingListType::
  setId (::std::unique_ptr< IdType > x)
  {
    this->Id_.set (std::move (x));
  }

  const PackingListType::AnnotationTextOptional& PackingListType::
  getAnnotationText () const
  {
    return this->AnnotationText_;
  }

  PackingListType::AnnotationTextOptional& PackingListType::
  getAnnotationText ()
  {
    return this->AnnotationText_;
  }

  void PackingListType::
  setAnnotationText (const AnnotationTextType& x)
  {
    this->AnnotationText_.set (x);
  }

  void PackingListType::
  setAnnotationText (const AnnotationTextOptional& x)
  {
    this->AnnotationText_ = x;
  }

  void PackingListType::
  setAnnotationText (::std::unique_ptr< AnnotationTextType > x)
  {
    this->AnnotationText_.set (std::move (x));
  }

  const PackingListType::IconIdOptional& PackingListType::
  getIconId () const
  {
    return this->IconId_;
  }

  PackingListType::IconIdOptional& PackingListType::
  getIconId ()
  {
    return this->IconId_;
  }

  void PackingListType::
  setIconId (const IconIdType& x)
  {
    this->IconId_.set (x);
  }

  void PackingListType::
  setIconId (const IconIdOptional& x)
  {
    this->IconId_ = x;
  }

  void PackingListType::
  setIconId (::std::unique_ptr< IconIdType > x)
  {
    this->IconId_.set (std::move (x));
  }

  const PackingListType::IssueDateType& PackingListType::
  getIssueDate () const
  {
    return this->IssueDate_.get ();
  }

  PackingListType::IssueDateType& PackingListType::
  getIssueDate ()
  {
    return this->IssueDate_.get ();
  }

  void PackingListType::
  setIssueDate (const IssueDateType& x)
  {
    this->IssueDate_.set (x);
  }

  void PackingListType::
  setIssueDate (::std::unique_ptr< IssueDateType > x)
  {
    this->IssueDate_.set (std::move (x));
  }

  const PackingListType::IssuerType& PackingListType::
  getIssuer () const
  {
    return this->Issuer_.get ();
  }

  PackingListType::IssuerType& PackingListType::
  getIssuer ()
  {
    return this->Issuer_.get ();
  }

  void PackingListType::
  setIssuer (const IssuerType& x)
  {
    this->Issuer_.set (x);
  }

  void PackingListType::
  setIssuer (::std::unique_ptr< IssuerType > x)
  {
    this->Issuer_.set (std::move (x));
  }

  const PackingListType::CreatorType& PackingListType::
  getCreator () const
  {
    return this->Creator_.get ();
  }

  PackingListType::CreatorType& PackingListType::
  getCreator ()
  {
    return this->Creator_.get ();
  }

  void PackingListType::
  setCreator (const CreatorType& x)
  {
    this->Creator_.set (x);
  }

  void PackingListType::
  setCreator (::std::unique_ptr< CreatorType > x)
  {
    this->Creator_.set (std::move (x));
  }

  const PackingListType::GroupIdOptional& PackingListType::
  getGroupId () const
  {
    return this->GroupId_;
  }

  PackingListType::GroupIdOptional& PackingListType::
  getGroupId ()
  {
    return this->GroupId_;
  }

  void PackingListType::
  setGroupId (const GroupIdType& x)
  {
    this->GroupId_.set (x);
  }

  void PackingListType::
  setGroupId (const GroupIdOptional& x)
  {
    this->GroupId_ = x;
  }

  void PackingListType::
  setGroupId (::std::unique_ptr< GroupIdType > x)
  {
    this->GroupId_.set (std::move (x));
  }

  const PackingListType::AssetListType& PackingListType::
  getAssetList () const
  {
    return this->AssetList_.get ();
  }

  PackingListType::AssetListType& PackingListType::
  getAssetList ()
  {
    return this->AssetList_.get ();
  }

  void PackingListType::
  setAssetList (const AssetListType& x)
  {
    this->AssetList_.set (x);
  }

  void PackingListType::
  setAssetList (::std::unique_ptr< AssetListType > x)
  {
    this->AssetList_.set (std::move (x));
  }

  const PackingListType::SignerOptional& PackingListType::
  getSigner () const
  {
    return this->Signer_;
  }

  PackingListType::SignerOptional& PackingListType::
  getSigner ()
  {
    return this->Signer_;
  }

  void PackingListType::
  setSigner (const SignerType& x)
  {
    this->Signer_.set (x);
  }

  void PackingListType::
  setSigner (const SignerOptional& x)
  {
    this->Signer_ = x;
  }

  void PackingListType::
  setSigner (::std::unique_ptr< SignerType > x)
  {
    this->Signer_.set (std::move (x));
  }

  const PackingListType::SignatureOptional& PackingListType::
  getSignature () const
  {
    return this->Signature_;
  }

  PackingListType::SignatureOptional& PackingListType::
  getSignature ()
  {
    return this->Signature_;
  }

  void PackingListType::
  setSignature (const SignatureType& x)
  {
    this->Signature_.set (x);
  }

  void PackingListType::
  setSignature (const SignatureOptional& x)
  {
    this->Signature_ = x;
  }

  void PackingListType::
  setSignature (::std::unique_ptr< SignatureType > x)
  {
    this->Signature_.set (std::move (x));
  }


  // AssetType
  // 

  const AssetType::IdType& AssetType::
  getId () const
  {
    return this->Id_.get ();
  }

  AssetType::IdType& AssetType::
  getId ()
  {
    return this->Id_.get ();
  }

  void AssetType::
  setId (const IdType& x)
  {
    this->Id_.set (x);
  }

  void AssetType::
  setId (::std::unique_ptr< IdType > x)
  {
    this->Id_.set (std::move (x));
  }

  const AssetType::AnnotationTextOptional& AssetType::
  getAnnotationText () const
  {
    return this->AnnotationText_;
  }

  AssetType::AnnotationTextOptional& AssetType::
  getAnnotationText ()
  {
    return this->AnnotationText_;
  }

  void AssetType::
  setAnnotationText (const AnnotationTextType& x)
  {
    this->AnnotationText_.set (x);
  }

  void AssetType::
  setAnnotationText (const AnnotationTextOptional& x)
  {
    this->AnnotationText_ = x;
  }

  void AssetType::
  setAnnotationText (::std::unique_ptr< AnnotationTextType > x)
  {
    this->AnnotationText_.set (std::move (x));
  }

  const AssetType::HashType& AssetType::
  getHash () const
  {
    return this->Hash_.get ();
  }

  AssetType::HashType& AssetType::
  getHash ()
  {
    return this->Hash_.get ();
  }

  void AssetType::
  setHash (const HashType& x)
  {
    this->Hash_.set (x);
  }

  void AssetType::
  setHash (::std::unique_ptr< HashType > x)
  {
    this->Hash_.set (std::move (x));
  }

  const AssetType::SizeType& AssetType::
  getSize () const
  {
    return this->Size_.get ();
  }

  AssetType::SizeType& AssetType::
  getSize ()
  {
    return this->Size_.get ();
  }

  void AssetType::
  setSize (const SizeType& x)
  {
    this->Size_.set (x);
  }

  const AssetType::TypeType& AssetType::
  getType () const
  {
    return this->Type_.get ();
  }

  AssetType::TypeType& AssetType::
  getType ()
  {
    return this->Type_.get ();
  }

  void AssetType::
  setType (const TypeType& x)
  {
    this->Type_.set (x);
  }

  void AssetType::
  setType (::std::unique_ptr< TypeType > x)
  {
    this->Type_.set (std::move (x));
  }

  const AssetType::OriginalFileNameOptional& AssetType::
  getOriginalFileName () const
  {
    return this->OriginalFileName_;
  }

  AssetType::OriginalFileNameOptional& AssetType::
  getOriginalFileName ()
  {
    return this->OriginalFileName_;
  }

  void AssetType::
  setOriginalFileName (const OriginalFileNameType& x)
  {
    this->OriginalFileName_.set (x);
  }

  void AssetType::
  setOriginalFileName (const OriginalFileNameOptional& x)
  {
    this->OriginalFileName_ = x;
  }

  void AssetType::
  setOriginalFileName (::std::unique_ptr< OriginalFileNameType > x)
  {
    this->OriginalFileName_.set (std::move (x));
  }

  const AssetType::HashAlgorithmType& AssetType::
  getHashAlgorithm () const
  {
    return this->HashAlgorithm_.get ();
  }

  AssetType::HashAlgorithmType& AssetType::
  getHashAlgorithm ()
  {
    return this->HashAlgorithm_.get ();
  }

  void AssetType::
  setHashAlgorithm (const HashAlgorithmType& x)
  {
    this->HashAlgorithm_.set (x);
  }

  void AssetType::
  setHashAlgorithm (::std::unique_ptr< HashAlgorithmType > x)
  {
    this->HashAlgorithm_.set (std::move (x));
  }


  // UUID
  // 


  // UserText
  // 

  const UserText::LanguageType& UserText::
  getLanguage () const
  {
    return this->language_.get ();
  }

  UserText::LanguageType& UserText::
  getLanguage ()
  {
    return this->language_.get ();
  }

  void UserText::
  setLanguage (const LanguageType& x)
  {
    this->language_.set (x);
  }

  void UserText::
  setLanguage (::std::unique_ptr< LanguageType > x)
  {
    this->language_.set (std::move (x));
  }

  const UserText::LanguageType& UserText::
  getLanguageDefaultValue ()
  {
    return language_default_value_;
  }


  // PackingListType_AssetListType
  // 

  const PackingListType_AssetListType::AssetSequence& PackingListType_AssetListType::
  getAsset () const
  {
    return this->Asset_;
  }

  PackingListType_AssetListType::AssetSequence& PackingListType_AssetListType::
  getAsset ()
  {
    return this->Asset_;
  }

  void PackingListType_AssetListType::
  setAsset (const AssetSequence& s)
  {
    this->Asset_ = s;
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace pkl2016
{
  // PackingListType
  //

  PackingListType::
  PackingListType (const IdType& Id,
                   const IssueDateType& IssueDate,
                   const IssuerType& Issuer,
                   const CreatorType& Creator,
                   const AssetListType& AssetList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AnnotationText_ (this),
    IconId_ (this),
    IssueDate_ (IssueDate, this),
    Issuer_ (Issuer, this),
    Creator_ (Creator, this),
    GroupId_ (this),
    AssetList_ (AssetList, this),
    Signer_ (this),
    Signature_ (this)
  {
  }

  PackingListType::
  PackingListType (const IdType& Id,
                   const IssueDateType& IssueDate,
                   ::std::unique_ptr< IssuerType > Issuer,
                   ::std::unique_ptr< CreatorType > Creator,
                   ::std::unique_ptr< AssetListType > AssetList)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AnnotationText_ (this),
    IconId_ (this),
    IssueDate_ (IssueDate, this),
    Issuer_ (std::move (Issuer), this),
    Creator_ (std::move (Creator), this),
    GroupId_ (this),
    AssetList_ (std::move (AssetList), this),
    Signer_ (this),
    Signature_ (this)
  {
  }

  PackingListType::
  PackingListType (const PackingListType& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Id_ (x.Id_, f, this),
    AnnotationText_ (x.AnnotationText_, f, this),
    IconId_ (x.IconId_, f, this),
    IssueDate_ (x.IssueDate_, f, this),
    Issuer_ (x.Issuer_, f, this),
    Creator_ (x.Creator_, f, this),
    GroupId_ (x.GroupId_, f, this),
    AssetList_ (x.AssetList_, f, this),
    Signer_ (x.Signer_, f, this),
    Signature_ (x.Signature_, f, this)
  {
  }

  PackingListType::
  PackingListType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Id_ (this),
    AnnotationText_ (this),
    IconId_ (this),
    IssueDate_ (this),
    Issuer_ (this),
    Creator_ (this),
    GroupId_ (this),
    AssetList_ (this),
    Signer_ (this),
    Signature_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void PackingListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Id
      //
      if (n.name () == "Id" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< IdType > r (
          IdTraits::create (i, f, this));

        if (!Id_.present ())
        {
          this->Id_.set (::std::move (r));
          continue;
        }
      }

      // AnnotationText
      //
      if (n.name () == "AnnotationText" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< AnnotationTextType > r (
          AnnotationTextTraits::create (i, f, this));

        if (!this->AnnotationText_)
        {
          this->AnnotationText_.set (::std::move (r));
          continue;
        }
      }

      // IconId
      //
      if (n.name () == "IconId" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< IconIdType > r (
          IconIdTraits::create (i, f, this));

        if (!this->IconId_)
        {
          this->IconId_.set (::std::move (r));
          continue;
        }
      }

      // IssueDate
      //
      if (n.name () == "IssueDate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< IssueDateType > r (
          IssueDateTraits::create (i, f, this));

        if (!IssueDate_.present ())
        {
          this->IssueDate_.set (::std::move (r));
          continue;
        }
      }

      // Issuer
      //
      if (n.name () == "Issuer" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< IssuerType > r (
          IssuerTraits::create (i, f, this));

        if (!Issuer_.present ())
        {
          this->Issuer_.set (::std::move (r));
          continue;
        }
      }

      // Creator
      //
      if (n.name () == "Creator" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< CreatorType > r (
          CreatorTraits::create (i, f, this));

        if (!Creator_.present ())
        {
          this->Creator_.set (::std::move (r));
          continue;
        }
      }

      // GroupId
      //
      if (n.name () == "GroupId" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< GroupIdType > r (
          GroupIdTraits::create (i, f, this));

        if (!this->GroupId_)
        {
          this->GroupId_.set (::std::move (r));
          continue;
        }
      }

      // AssetList
      //
      if (n.name () == "AssetList" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< AssetListType > r (
          AssetListTraits::create (i, f, this));

        if (!AssetList_.present ())
        {
          this->AssetList_.set (::std::move (r));
          continue;
        }
      }

      // Signer
      //
      if (n.name () == "Signer" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< SignerType > r (
          SignerTraits::create (i, f, this));

        if (!this->Signer_)
        {
          this->Signer_.set (::std::move (r));
          continue;
        }
      }

      // Signature
      //
      if (n.name () == "Signature" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::unique_ptr< SignatureType > r (
          SignatureTraits::create (i, f, this));

        if (!this->Signature_)
        {
          this->Signature_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Id",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }

    if (!IssueDate_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IssueDate",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }

    if (!Issuer_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Issuer",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }

    if (!Creator_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Creator",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }

    if (!AssetList_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "AssetList",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }
  }

  PackingListType* PackingListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class PackingListType (*this, f, c);
  }

  PackingListType& PackingListType::
  operator= (const PackingListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Id_ = x.Id_;
      this->AnnotationText_ = x.AnnotationText_;
      this->IconId_ = x.IconId_;
      this->IssueDate_ = x.IssueDate_;
      this->Issuer_ = x.Issuer_;
      this->Creator_ = x.Creator_;
      this->GroupId_ = x.GroupId_;
      this->AssetList_ = x.AssetList_;
      this->Signer_ = x.Signer_;
      this->Signature_ = x.Signature_;
    }

    return *this;
  }

  PackingListType::
  ~PackingListType ()
  {
  }

  // AssetType
  //

  AssetType::
  AssetType (const IdType& Id,
             const HashType& Hash,
             const SizeType& Size,
             const TypeType& Type,
             const HashAlgorithmType& HashAlgorithm)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AnnotationText_ (this),
    Hash_ (Hash, this),
    Size_ (Size, this),
    Type_ (Type, this),
    OriginalFileName_ (this),
    HashAlgorithm_ (HashAlgorithm, this)
  {
  }

  AssetType::
  AssetType (const IdType& Id,
             const HashType& Hash,
             const SizeType& Size,
             const TypeType& Type,
             ::std::unique_ptr< HashAlgorithmType > HashAlgorithm)
  : ::xml_schema::Type (),
    Id_ (Id, this),
    AnnotationText_ (this),
    Hash_ (Hash, this),
    Size_ (Size, this),
    Type_ (Type, this),
    OriginalFileName_ (this),
    HashAlgorithm_ (std::move (HashAlgorithm), this)
  {
  }

  AssetType::
  AssetType (const AssetType& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Id_ (x.Id_, f, this),
    AnnotationText_ (x.AnnotationText_, f, this),
    Hash_ (x.Hash_, f, this),
    Size_ (x.Size_, f, this),
    Type_ (x.Type_, f, this),
    OriginalFileName_ (x.OriginalFileName_, f, this),
    HashAlgorithm_ (x.HashAlgorithm_, f, this)
  {
  }

  AssetType::
  AssetType (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Id_ (this),
    AnnotationText_ (this),
    Hash_ (this),
    Size_ (this),
    Type_ (this),
    OriginalFileName_ (this),
    HashAlgorithm_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AssetType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Id
      //
      if (n.name () == "Id" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< IdType > r (
          IdTraits::create (i, f, this));

        if (!Id_.present ())
        {
          this->Id_.set (::std::move (r));
          continue;
        }
      }

      // AnnotationText
      //
      if (n.name () == "AnnotationText" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< AnnotationTextType > r (
          AnnotationTextTraits::create (i, f, this));

        if (!this->AnnotationText_)
        {
          this->AnnotationText_.set (::std::move (r));
          continue;
        }
      }

      // Hash
      //
      if (n.name () == "Hash" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< HashType > r (
          HashTraits::create (i, f, this));

        if (!Hash_.present ())
        {
          this->Hash_.set (::std::move (r));
          continue;
        }
      }

      // Size
      //
      if (n.name () == "Size" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        if (!Size_.present ())
        {
          this->Size_.set (SizeTraits::create (i, f, this));
          continue;
        }
      }

      // Type
      //
      if (n.name () == "Type" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< TypeType > r (
          TypeTraits::create (i, f, this));

        if (!Type_.present ())
        {
          this->Type_.set (::std::move (r));
          continue;
        }
      }

      // OriginalFileName
      //
      if (n.name () == "OriginalFileName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< OriginalFileNameType > r (
          OriginalFileNameTraits::create (i, f, this));

        if (!this->OriginalFileName_)
        {
          this->OriginalFileName_.set (::std::move (r));
          continue;
        }
      }

      // HashAlgorithm
      //
      if (n.name () == "HashAlgorithm" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< HashAlgorithmType > r (
          HashAlgorithmTraits::create (i, f, this));

        if (!HashAlgorithm_.present ())
        {
          this->HashAlgorithm_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Id",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }

    if (!Hash_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Hash",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }

    if (!Size_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Size",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }

    if (!Type_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Type",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }

    if (!HashAlgorithm_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "HashAlgorithm",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }
  }

  AssetType* AssetType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AssetType (*this, f, c);
  }

  AssetType& AssetType::
  operator= (const AssetType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Id_ = x.Id_;
      this->AnnotationText_ = x.AnnotationText_;
      this->Hash_ = x.Hash_;
      this->Size_ = x.Size_;
      this->Type_ = x.Type_;
      this->OriginalFileName_ = x.OriginalFileName_;
      this->HashAlgorithm_ = x.HashAlgorithm_;
    }

    return *this;
  }

  AssetType::
  ~AssetType ()
  {
  }

  // UUID
  //

  UUID::
  UUID (const ::xml_schema::Uri& _xsd_Uri_base)
  : ::xml_schema::Uri (_xsd_Uri_base)
  {
  }

  UUID::
  UUID (const UUID& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Uri (x, f, c)
  {
  }

  UUID::
  UUID (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Uri (e, f, c)
  {
  }

  UUID::
  UUID (const ::xercesc::DOMAttr& a,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Uri (a, f, c)
  {
  }

  UUID::
  UUID (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Uri (s, e, f, c)
  {
  }

  UUID* UUID::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class UUID (*this, f, c);
  }

  UUID::
  ~UUID ()
  {
  }

  // UserText
  //

  const UserText::LanguageType UserText::language_default_value_ (
    "en");

  UserText::
  UserText ()
  : ::xml_schema::String (),
    language_ (getLanguageDefaultValue (), this)
  {
  }

  UserText::
  UserText (const char* _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    language_ (getLanguageDefaultValue (), this)
  {
  }

  UserText::
  UserText (const ::std::string& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    language_ (getLanguageDefaultValue (), this)
  {
  }

  UserText::
  UserText (const ::xml_schema::String& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    language_ (getLanguageDefaultValue (), this)
  {
  }

  UserText::
  UserText (const UserText& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::String (x, f, c),
    language_ (x.language_, f, this)
  {
  }

  UserText::
  UserText (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::String (e, f | ::xml_schema::Flags::base, c),
    language_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void UserText::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "language" && n.namespace_ ().empty ())
      {
        this->language_.set (LanguageTraits::create (i, f, this));
        continue;
      }
    }

    if (!language_.present ())
    {
      this->language_.set (getLanguageDefaultValue ());
    }
  }

  UserText* UserText::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class UserText (*this, f, c);
  }

  UserText& UserText::
  operator= (const UserText& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::String& > (*this) = x;
      this->language_ = x.language_;
    }

    return *this;
  }

  UserText::
  ~UserText ()
  {
  }

  // PackingListType_AssetListType
  //

  PackingListType_AssetListType::
  PackingListType_AssetListType ()
  : ::xml_schema::Type (),
    Asset_ (this)
  {
  }

  PackingListType_AssetListType::
  PackingListType_AssetListType (const PackingListType_AssetListType& x,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Asset_ (x.Asset_, f, this)
  {
  }

  PackingListType_AssetListType::
  PackingListType_AssetListType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Asset_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void PackingListType_AssetListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Asset
      //
      if (n.name () == "Asset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
      {
        ::std::unique_ptr< AssetType > r (
          AssetTraits::create (i, f, this));

        this->Asset_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  PackingListType_AssetListType* PackingListType_AssetListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class PackingListType_AssetListType (*this, f, c);
  }

  PackingListType_AssetListType& PackingListType_AssetListType::
  operator= (const PackingListType_AssetListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Asset_ = x.Asset_;
    }

    return *this;
  }

  PackingListType_AssetListType::
  ~PackingListType_AssetListType ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace pkl2016
{
  ::std::ostream&
  operator<< (::std::ostream& o, const PackingListType& i)
  {
    o << ::std::endl << "Id: " << i.getId ();
    if (i.getAnnotationText ())
    {
      o << ::std::endl << "AnnotationText: " << *i.getAnnotationText ();
    }

    if (i.getIconId ())
    {
      o << ::std::endl << "IconId: " << *i.getIconId ();
    }

    o << ::std::endl << "IssueDate: " << i.getIssueDate ();
    o << ::std::endl << "Issuer: " << i.getIssuer ();
    o << ::std::endl << "Creator: " << i.getCreator ();
    if (i.getGroupId ())
    {
      o << ::std::endl << "GroupId: " << *i.getGroupId ();
    }

    o << ::std::endl << "AssetList: " << i.getAssetList ();
    if (i.getSigner ())
    {
      o << ::std::endl << "Signer: " << *i.getSigner ();
    }

    if (i.getSignature ())
    {
      o << ::std::endl << "Signature: " << *i.getSignature ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const AssetType& i)
  {
    o << ::std::endl << "Id: " << i.getId ();
    if (i.getAnnotationText ())
    {
      o << ::std::endl << "AnnotationText: " << *i.getAnnotationText ();
    }

    o << ::std::endl << "Hash: " << i.getHash ();
    o << ::std::endl << "Size: " << i.getSize ();
    o << ::std::endl << "Type: " << i.getType ();
    if (i.getOriginalFileName ())
    {
      o << ::std::endl << "OriginalFileName: " << *i.getOriginalFileName ();
    }

    o << ::std::endl << "HashAlgorithm: " << i.getHashAlgorithm ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UUID& i)
  {
    o << static_cast< const ::xml_schema::Uri& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const UserText& i)
  {
    o << static_cast< const ::xml_schema::String& > (i);

    o << ::std::endl << "language: " << i.getLanguage ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const PackingListType_AssetListType& i)
  {
    for (PackingListType_AssetListType::AssetConstIterator
         b (i.getAsset ().begin ()), e (i.getAsset ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Asset: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace pkl2016
{
  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::pkl2016::PackingListType > (
      ::pkl2016::parsePackingList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::pkl2016::PackingListType > (
      ::pkl2016::parsePackingList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::pkl2016::PackingListType > (
      ::pkl2016::parsePackingList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::pkl2016::parsePackingList (isrc, f, p);
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::pkl2016::parsePackingList (isrc, h, f, p);
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::pkl2016::parsePackingList (isrc, h, f, p);
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::pkl2016::parsePackingList (isrc, f, p);
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::pkl2016::parsePackingList (isrc, h, f, p);
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::pkl2016::parsePackingList (isrc, h, f, p);
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::pkl2016::PackingListType > (
      ::pkl2016::parsePackingList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::pkl2016::PackingListType > (
      ::pkl2016::parsePackingList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::pkl2016::PackingListType > (
      ::pkl2016::parsePackingList (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::pkl2016::PackingListType > (
        ::pkl2016::parsePackingList (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PackingList" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
    {
      ::std::unique_ptr< ::pkl2016::PackingListType > r (
        ::xsd::cxx::tree::traits< ::pkl2016::PackingListType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PackingList",
      "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
  }

  ::std::unique_ptr< ::pkl2016::PackingListType >
  parsePackingList (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "PackingList" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
    {
      ::std::unique_ptr< ::pkl2016::PackingListType > r (
        ::xsd::cxx::tree::traits< ::pkl2016::PackingListType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PackingList",
      "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace pkl2016
{
  void
  serializePackingList (::std::ostream& o,
                        const ::pkl2016::PackingListType& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::pkl2016::serializePackingList (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializePackingList (::std::ostream& o,
                        const ::pkl2016::PackingListType& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::pkl2016::serializePackingList (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializePackingList (::std::ostream& o,
                        const ::pkl2016::PackingListType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::pkl2016::serializePackingList (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializePackingList (::xercesc::XMLFormatTarget& t,
                        const ::pkl2016::PackingListType& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::pkl2016::serializePackingList (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializePackingList (::xercesc::XMLFormatTarget& t,
                        const ::pkl2016::PackingListType& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::pkl2016::serializePackingList (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializePackingList (::xercesc::XMLFormatTarget& t,
                        const ::pkl2016::PackingListType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::pkl2016::serializePackingList (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializePackingList (::xercesc::DOMDocument& d,
                        const ::pkl2016::PackingListType& s,
                        ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PackingList" &&
        n.namespace_ () == "http://www.smpte-ra.org/schemas/2067-2/2016/PKL")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PackingList",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializePackingList (const ::pkl2016::PackingListType& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "PackingList",
        "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
        m, f));

    ::pkl2016::serializePackingList (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const PackingListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Id",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getId ();
    }

    // AnnotationText
    //
    if (i.getAnnotationText ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AnnotationText",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << *i.getAnnotationText ();
    }

    // IconId
    //
    if (i.getIconId ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IconId",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << *i.getIconId ();
    }

    // IssueDate
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IssueDate",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getIssueDate ();
    }

    // Issuer
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Issuer",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getIssuer ();
    }

    // Creator
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Creator",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getCreator ();
    }

    // GroupId
    //
    if (i.getGroupId ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GroupId",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << *i.getGroupId ();
    }

    // AssetList
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AssetList",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getAssetList ();
    }

    // Signer
    //
    if (i.getSigner ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Signer",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << *i.getSigner ();
    }

    // Signature
    //
    if (i.getSignature ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Signature",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.getSignature ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const AssetType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Id",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getId ();
    }

    // AnnotationText
    //
    if (i.getAnnotationText ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AnnotationText",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << *i.getAnnotationText ();
    }

    // Hash
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Hash",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getHash ();
    }

    // Size
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Size",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getSize ();
    }

    // Type
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Type",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getType ();
    }

    // OriginalFileName
    //
    if (i.getOriginalFileName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OriginalFileName",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << *i.getOriginalFileName ();
    }

    // HashAlgorithm
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "HashAlgorithm",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << i.getHashAlgorithm ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const UUID& i)
  {
    e << static_cast< const ::xml_schema::Uri& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const UUID& i)
  {
    a << static_cast< const ::xml_schema::Uri& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const UUID& i)
  {
    l << static_cast< const ::xml_schema::Uri& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const UserText& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);

    // language
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "language",
          e));

      a << i.getLanguage ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const PackingListType_AssetListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Asset
    //
    for (PackingListType_AssetListType::AssetConstIterator
         b (i.getAsset ().begin ()), n (i.getAsset ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Asset",
          "http://www.smpte-ra.org/schemas/2067-2/2016/PKL",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

